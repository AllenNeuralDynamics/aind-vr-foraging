<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Entity Relationship Diagram created by erdantic Pages: 1 -->
<svg width="4850pt" height="1385pt"
 viewBox="0.00 0.00 4850.00 1384.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1380.5)">
<title>Entity Relationship Diagram created by erdantic</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1380.5 4846,-1380.5 4846,4 -4,4"/>
<text text-anchor="middle" x="2421" y="-6.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v1.0.5 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic -->
<g id="node1" class="node">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic</title>
<g id="a_node1"><a xlink:title="aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic&#10;&#10;Base Task Primitive.&#10;Holds Task metadata and parameters.&#10;">
<polygon fill="none" stroke="black" points="0.5,-928.5 0.5,-949.5 277.5,-949.5 277.5,-928.5 0.5,-928.5"/>
<text text-anchor="start" x="60.5" y="-936.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindVrForagingTaskLogic</text>
<polygon fill="none" stroke="black" points="0.5,-907.5 0.5,-928.5 95.5,-928.5 95.5,-907.5 0.5,-907.5"/>
<text text-anchor="start" x="32.5" y="-914.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="95.5,-907.5 95.5,-928.5 277.5,-928.5 277.5,-907.5 95.5,-907.5"/>
<text text-anchor="start" x="117" y="-914.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;AindVrForaging&#39;]</text>
<polygon fill="none" stroke="black" points="0.5,-886.5 0.5,-907.5 95.5,-907.5 95.5,-886.5 0.5,-886.5"/>
<text text-anchor="start" x="17.5" y="-893.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">description</text>
<polygon fill="none" stroke="black" points="95.5,-886.5 95.5,-907.5 277.5,-907.5 277.5,-886.5 95.5,-886.5"/>
<text text-anchor="start" x="179.5" y="-893.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0.5,-865.5 0.5,-886.5 95.5,-886.5 95.5,-865.5 0.5,-865.5"/>
<text text-anchor="start" x="3.5" y="-872.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_parameters</text>
<polygon fill="none" stroke="black" points="95.5,-865.5 95.5,-886.5 277.5,-886.5 277.5,-865.5 95.5,-865.5"/>
<text text-anchor="start" x="98.5" y="-872.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AindVrForagingTaskParameters</text>
<polygon fill="none" stroke="black" points="0.5,-844.5 0.5,-865.5 95.5,-865.5 95.5,-844.5 0.5,-844.5"/>
<text text-anchor="start" x="28" y="-851.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">version</text>
<polygon fill="none" stroke="black" points="95.5,-844.5 95.5,-865.5 277.5,-865.5 277.5,-844.5 95.5,-844.5"/>
<text text-anchor="start" x="147.5" y="-851.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.5.0&#39;]</text>
<polygon fill="none" stroke="black" points="0.5,-823.5 0.5,-844.5 95.5,-844.5 95.5,-823.5 0.5,-823.5"/>
<text text-anchor="start" x="15.5" y="-830.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stage_name</text>
<polygon fill="none" stroke="black" points="95.5,-823.5 95.5,-844.5 277.5,-844.5 277.5,-823.5 95.5,-823.5"/>
<text text-anchor="start" x="151.5" y="-830.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters -->
<g id="node2" class="node">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters</title>
<g id="a_node2"><a xlink:title="aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#10;&#10;Set of parameters associated with a subject task.&#10;Subclass with Task Parameters.&#10;">
<polygon fill="none" stroke="black" points="385,-864.5 385,-885.5 753,-885.5 753,-864.5 385,-864.5"/>
<text text-anchor="start" x="473" y="-872.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindVrForagingTaskParameters</text>
<polygon fill="none" stroke="black" points="385,-843.5 385,-864.5 593,-864.5 593,-843.5 385,-843.5"/>
<text text-anchor="start" x="464.5" y="-850.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rng_seed</text>
<polygon fill="none" stroke="black" points="593,-843.5 593,-864.5 753,-864.5 753,-843.5 593,-843.5"/>
<text text-anchor="start" x="632" y="-850.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
<polygon fill="none" stroke="black" points="385,-822.5 385,-843.5 593,-843.5 593,-822.5 385,-822.5"/>
<text text-anchor="start" x="388" y="-829.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">aind_behavior_services_pkg_version</text>
<polygon fill="none" stroke="black" points="593,-822.5 593,-843.5 753,-843.5 753,-822.5 593,-822.5"/>
<text text-anchor="start" x="634" y="-829.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.9.0&#39;]</text>
<polygon fill="none" stroke="black" points="385,-801.5 385,-822.5 593,-822.5 593,-801.5 385,-801.5"/>
<text text-anchor="start" x="466" y="-808.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">updaters</text>
<polygon fill="none" stroke="black" points="593,-801.5 593,-822.5 753,-822.5 753,-801.5 593,-801.5"/>
<text text-anchor="start" x="596" y="-808.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Dict[str, NumericalUpdater]</text>
<polygon fill="none" stroke="black" points="385,-780.5 385,-801.5 593,-801.5 593,-780.5 385,-780.5"/>
<text text-anchor="start" x="454" y="-787.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">environment</text>
<polygon fill="none" stroke="black" points="593,-780.5 593,-801.5 753,-801.5 753,-780.5 593,-780.5"/>
<text text-anchor="start" x="632" y="-787.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">BlockStructure</text>
<polygon fill="none" stroke="black" points="385,-759.5 385,-780.5 593,-780.5 593,-759.5 385,-759.5"/>
<text text-anchor="start" x="435" y="-766.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode_settings</text>
<polygon fill="none" stroke="black" points="593,-759.5 593,-780.5 753,-780.5 753,-759.5 593,-759.5"/>
<text text-anchor="start" x="622" y="-766.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">TaskModeSettings</text>
<polygon fill="none" stroke="black" points="385,-738.5 385,-759.5 593,-759.5 593,-738.5 385,-738.5"/>
<text text-anchor="start" x="440.5" y="-745.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation_control</text>
<polygon fill="none" stroke="black" points="593,-738.5 593,-759.5 753,-759.5 753,-738.5 593,-738.5"/>
<text text-anchor="start" x="625" y="-745.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic&#45;&gt;aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters -->
<g id="edge1" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic:e&#45;&gt;aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:w</title>
<path fill="none" stroke="black" d="M287.12,-875.5C322,-875.5 336.76,-875.5 369.67,-875.5"/>
<polyline fill="none" stroke="black" points="277,-875.5 282,-875.5 "/>
<polyline fill="none" stroke="black" points="282,-875.5 287,-875.5 "/>
<polyline fill="none" stroke="black" points="385,-875.5 380,-875.5 "/>
<polygon fill="black" stroke="black" points="379,-870.5 379,-880.5 377,-880.5 377,-870.5 379,-870.5"/>
<polyline fill="none" stroke="black" points="380,-875.5 375,-875.5 "/>
<polygon fill="black" stroke="black" points="374,-870.5 374,-880.5 372,-880.5 372,-870.5 374,-870.5"/>
<polyline fill="none" stroke="black" points="375,-875.5 370,-875.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockStructure -->
<g id="node3" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockStructure</title>
<g id="a_node3"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockStructure&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="861,-886.5 861,-907.5 1127,-907.5 1127,-886.5 861,-886.5"/>
<text text-anchor="start" x="949.5" y="-894.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockStructure</text>
<polygon fill="none" stroke="black" points="861,-865.5 861,-886.5 955,-886.5 955,-865.5 861,-865.5"/>
<text text-anchor="start" x="890" y="-872.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">blocks</text>
<polygon fill="none" stroke="black" points="955,-865.5 955,-886.5 1127,-886.5 1127,-865.5 955,-865.5"/>
<text text-anchor="start" x="1009.5" y="-872.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Block]</text>
<polygon fill="none" stroke="black" points="861,-844.5 861,-865.5 955,-865.5 955,-844.5 861,-844.5"/>
<text text-anchor="start" x="864" y="-851.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">sampling_mode</text>
<polygon fill="none" stroke="black" points="955,-844.5 955,-865.5 1127,-865.5 1127,-844.5 955,-844.5"/>
<text text-anchor="start" x="958" y="-851.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;Random&#39;, &#39;Sequential&#39;]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockStructure -->
<g id="edge2" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockStructure:w</title>
<path fill="none" stroke="black" d="M763.27,-791.43C813.08,-800.96 800.19,-881.35 846.01,-895.41"/>
<polyline fill="none" stroke="black" points="753,-790.5 757.98,-790.95 "/>
<polyline fill="none" stroke="black" points="757.98,-790.95 762.96,-791.4 "/>
<polyline fill="none" stroke="black" points="861,-897.5 856.05,-896.81 "/>
<polygon fill="black" stroke="black" points="855.75,-891.72 854.37,-901.62 852.39,-901.35 853.77,-891.44 855.75,-891.72"/>
<polyline fill="none" stroke="black" points="856.05,-896.81 851.1,-896.12 "/>
<polygon fill="black" stroke="black" points="850.8,-891.03 849.41,-900.93 847.43,-900.65 848.82,-890.75 850.8,-891.03"/>
<polyline fill="none" stroke="black" points="851.1,-896.12 846.14,-895.43 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdater -->
<g id="node4" class="node">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdater</title>
<g id="a_node4"><a xlink:title="aind_behavior_vr_foraging.task_logic.NumericalUpdater&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="876,-1091.5 876,-1112.5 1112,-1112.5 1112,-1091.5 876,-1091.5"/>
<text text-anchor="start" x="939" y="-1099.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdater</text>
<polygon fill="none" stroke="black" points="876,-1070.5 876,-1091.5 943,-1091.5 943,-1070.5 876,-1070.5"/>
<text text-anchor="start" x="883.5" y="-1077.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation</text>
<polygon fill="none" stroke="black" points="943,-1070.5 943,-1091.5 1112,-1091.5 1112,-1070.5 943,-1070.5"/>
<text text-anchor="start" x="949.5" y="-1077.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterOperation</text>
<polygon fill="none" stroke="black" points="876,-1049.5 876,-1070.5 943,-1070.5 943,-1049.5 876,-1049.5"/>
<text text-anchor="start" x="879" y="-1056.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">parameters</text>
<polygon fill="none" stroke="black" points="943,-1049.5 943,-1070.5 1112,-1070.5 1112,-1049.5 943,-1049.5"/>
<text text-anchor="start" x="946" y="-1056.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterParameters</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdater -->
<g id="edge3" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdater:w</title>
<path fill="none" stroke="black" d="M763.11,-812.05C880.49,-825.53 749.67,-1080.79 859.91,-1101.21"/>
<polyline fill="none" stroke="black" points="753,-811.5 757.99,-811.77 "/>
<polyline fill="none" stroke="black" points="757.99,-811.77 762.99,-812.05 "/>
<polygon fill="black" stroke="black" points="865.04,-1101.64 874.62,-1106.98 870.02,-1102.07 875,-1102.5 875,-1102.5 875,-1102.5 870.02,-1102.07 875.38,-1098.02 865.04,-1101.64 865.04,-1101.64"/>
<polyline fill="none" stroke="black" points="865.04,-1101.64 860.05,-1101.22 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl -->
<g id="node5" class="node">
<title>aind_behavior_vr_foraging.task_logic.OperationControl</title>
<g id="a_node5"><a xlink:title="aind_behavior_vr_foraging.task_logic.OperationControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="863,-384.5 863,-405.5 1126,-405.5 1126,-384.5 863,-384.5"/>
<text text-anchor="start" x="941.5" y="-392.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperationControl</text>
<polygon fill="none" stroke="black" points="863,-363.5 863,-384.5 998,-384.5 998,-363.5 863,-363.5"/>
<text text-anchor="start" x="866" y="-370.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">movable_spout_control</text>
<polygon fill="none" stroke="black" points="998,-363.5 998,-384.5 1126,-384.5 1126,-363.5 998,-363.5"/>
<text text-anchor="start" x="1001" y="-370.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">MovableSpoutControl</text>
<polygon fill="none" stroke="black" points="863,-342.5 863,-363.5 998,-363.5 998,-342.5 863,-342.5"/>
<text text-anchor="start" x="895.5" y="-349.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_control</text>
<polygon fill="none" stroke="black" points="998,-342.5 998,-363.5 1126,-363.5 1126,-342.5 998,-342.5"/>
<text text-anchor="start" x="1027" y="-349.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OdorControl</text>
<polygon fill="none" stroke="black" points="863,-321.5 863,-342.5 998,-342.5 998,-321.5 863,-321.5"/>
<text text-anchor="start" x="886" y="-328.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">position_control</text>
<polygon fill="none" stroke="black" points="998,-321.5 998,-342.5 1126,-342.5 1126,-321.5 998,-321.5"/>
<text text-anchor="start" x="1019" y="-328.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PositionControl</text>
<polygon fill="none" stroke="black" points="863,-300.5 863,-321.5 998,-321.5 998,-300.5 863,-300.5"/>
<text text-anchor="start" x="892.5" y="-307.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">audio_control</text>
<polygon fill="none" stroke="black" points="998,-300.5 998,-321.5 1126,-321.5 1126,-300.5 998,-300.5"/>
<text text-anchor="start" x="1024" y="-307.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AudioControl</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.OperationControl -->
<g id="edge4" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OperationControl:w</title>
<path fill="none" stroke="black" d="M763.06,-748.02C903,-733.99 715.04,-418.23 846.78,-396.66"/>
<polyline fill="none" stroke="black" points="753,-748.5 757.99,-748.26 "/>
<polyline fill="none" stroke="black" points="757.99,-748.26 762.99,-748.02 "/>
<polyline fill="none" stroke="black" points="862,-395.5 857.01,-395.88 "/>
<polygon fill="black" stroke="black" points="855.64,-390.97 856.4,-400.94 854.4,-401.09 853.64,-391.12 855.64,-390.97"/>
<polyline fill="none" stroke="black" points="857.01,-395.88 852.03,-396.26 "/>
<polygon fill="black" stroke="black" points="850.65,-391.35 851.41,-401.32 849.42,-401.47 848.66,-391.5 850.65,-391.35"/>
<polyline fill="none" stroke="black" points="852.03,-396.26 847.04,-396.64 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings -->
<g id="node6" class="node">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings</title>
<g id="a_node6"><a xlink:title="aind_behavior_vr_foraging.task_logic.TaskModeSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="1235.5,-580.5 1235.5,-601.5 1606.5,-601.5 1606.5,-580.5 1235.5,-580.5"/>
<text text-anchor="start" x="1367" y="-588.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">TaskModeSettings</text>
<polygon fill="none" stroke="black" points="1235.5,-559.5 1235.5,-580.5 1263.5,-580.5 1263.5,-559.5 1235.5,-559.5"/>
<text text-anchor="start" x="1238.5" y="-566.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="1263.5,-559.5 1263.5,-580.5 1606.5,-580.5 1606.5,-559.5 1263.5,-559.5"/>
<text text-anchor="start" x="1266.5" y="-566.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[HabituationSettings, ForagingSettings, DebugSettings]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.TaskModeSettings -->
<g id="edge5" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.TaskModeSettings:w</title>
<path fill="none" stroke="black" d="M763.23,-769.38C977.15,-764.27 1008.71,-599.34 1219.82,-591.77"/>
<polyline fill="none" stroke="black" points="753,-769.5 758,-769.44 "/>
<polyline fill="none" stroke="black" points="758,-769.44 763,-769.38 "/>
<polyline fill="none" stroke="black" points="1235,-591.5 1230,-591.59 "/>
<polygon fill="black" stroke="black" points="1228.91,-586.61 1229.09,-596.61 1227.09,-596.64 1226.91,-586.64 1228.91,-586.61"/>
<polyline fill="none" stroke="black" points="1230,-591.59 1225,-591.68 "/>
<polygon fill="black" stroke="black" points="1223.91,-586.7 1224.09,-596.69 1222.09,-596.73 1221.91,-586.73 1223.91,-586.7"/>
<polyline fill="none" stroke="black" points="1225,-591.68 1220,-591.77 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Block -->
<g id="node8" class="node">
<title>aind_behavior_vr_foraging.task_logic.Block</title>
<g id="a_node8"><a xlink:title="aind_behavior_vr_foraging.task_logic.Block&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1283.5,-956.5 1283.5,-977.5 1557.5,-977.5 1557.5,-956.5 1283.5,-956.5"/>
<text text-anchor="start" x="1403.5" y="-964.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Block</text>
<polygon fill="none" stroke="black" points="1283.5,-935.5 1283.5,-956.5 1412.5,-956.5 1412.5,-935.5 1283.5,-935.5"/>
<text text-anchor="start" x="1286.5" y="-942.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">environment_statistics</text>
<polygon fill="none" stroke="black" points="1412.5,-935.5 1412.5,-956.5 1557.5,-956.5 1557.5,-935.5 1412.5,-935.5"/>
<text text-anchor="start" x="1424.5" y="-942.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">EnvironmentStatistics</text>
<polygon fill="none" stroke="black" points="1283.5,-914.5 1283.5,-935.5 1412.5,-935.5 1412.5,-914.5 1283.5,-914.5"/>
<text text-anchor="start" x="1306.5" y="-921.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">end_conditions</text>
<polygon fill="none" stroke="black" points="1412.5,-914.5 1412.5,-935.5 1557.5,-935.5 1557.5,-914.5 1412.5,-914.5"/>
<text text-anchor="start" x="1415.5" y="-921.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[BlockEndCondition]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockStructure&#45;&gt;aind_behavior_vr_foraging.task_logic.Block -->
<g id="edge13" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockStructure:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Block:w</title>
<path fill="none" stroke="black" d="M1137.32,-876.04C1202.11,-883.05 1205.63,-956.08 1267.43,-966.31"/>
<polyline fill="none" stroke="black" points="1127,-875.5 1131.99,-875.76 "/>
<polyline fill="none" stroke="black" points="1131.99,-875.76 1136.99,-876.02 "/>
<polygon fill="black" stroke="black" points="1272.53,-966.71 1282.15,-971.99 1277.52,-967.11 1282.5,-967.5 1282.5,-967.5 1282.5,-967.5 1277.52,-967.11 1282.85,-963.01 1272.53,-966.71 1272.53,-966.71"/>
<polyline fill="none" stroke="black" points="1272.53,-966.71 1267.55,-966.32 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters -->
<g id="node27" class="node">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters</title>
<g id="a_node27"><a xlink:title="aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1328.5,-1119.5 1328.5,-1140.5 1512.5,-1140.5 1512.5,-1119.5 1328.5,-1119.5"/>
<text text-anchor="start" x="1331.5" y="-1127.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdaterParameters</text>
<polygon fill="none" stroke="black" points="1328.5,-1098.5 1328.5,-1119.5 1441.5,-1119.5 1441.5,-1098.5 1328.5,-1098.5"/>
<text text-anchor="start" x="1351" y="-1105.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">initial_value</text>
<polygon fill="none" stroke="black" points="1441.5,-1098.5 1441.5,-1119.5 1512.5,-1119.5 1512.5,-1098.5 1441.5,-1098.5"/>
<text text-anchor="start" x="1464.5" y="-1105.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1328.5,-1077.5 1328.5,-1098.5 1441.5,-1098.5 1441.5,-1077.5 1328.5,-1077.5"/>
<text text-anchor="start" x="1357.5" y="-1084.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">increment</text>
<polygon fill="none" stroke="black" points="1441.5,-1077.5 1441.5,-1098.5 1512.5,-1098.5 1512.5,-1077.5 1441.5,-1077.5"/>
<text text-anchor="start" x="1464.5" y="-1084.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1328.5,-1056.5 1328.5,-1077.5 1441.5,-1077.5 1441.5,-1056.5 1328.5,-1056.5"/>
<text text-anchor="start" x="1356" y="-1063.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">decrement</text>
<polygon fill="none" stroke="black" points="1441.5,-1056.5 1441.5,-1077.5 1512.5,-1077.5 1512.5,-1056.5 1441.5,-1056.5"/>
<text text-anchor="start" x="1464.5" y="-1063.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1328.5,-1035.5 1328.5,-1056.5 1441.5,-1056.5 1441.5,-1035.5 1328.5,-1035.5"/>
<text text-anchor="start" x="1357.5" y="-1042.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">minimum</text>
<polygon fill="none" stroke="black" points="1441.5,-1035.5 1441.5,-1056.5 1512.5,-1056.5 1512.5,-1035.5 1441.5,-1035.5"/>
<text text-anchor="start" x="1464.5" y="-1042.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1328.5,-1014.5 1328.5,-1035.5 1441.5,-1035.5 1441.5,-1014.5 1328.5,-1014.5"/>
<text text-anchor="start" x="1356" y="-1021.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="1441.5,-1014.5 1441.5,-1035.5 1512.5,-1035.5 1512.5,-1014.5 1441.5,-1014.5"/>
<text text-anchor="start" x="1464.5" y="-1021.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdater&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters -->
<g id="edge18" class="edge">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdater:e&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters:w</title>
<path fill="none" stroke="black" d="M1123,-1059.74C1209.45,-1064.02 1228.53,-1123.44 1312.29,-1129.93"/>
<polyline fill="none" stroke="black" points="1113,-1059.5 1118,-1059.62 "/>
<polyline fill="none" stroke="black" points="1118,-1059.62 1123,-1059.74 "/>
<polyline fill="none" stroke="black" points="1327.5,-1130.5 1322.5,-1130.31 "/>
<polygon fill="black" stroke="black" points="1321.69,-1125.28 1321.32,-1135.27 1319.32,-1135.2 1319.69,-1125.2 1321.69,-1125.28"/>
<polyline fill="none" stroke="black" points="1322.5,-1130.31 1317.51,-1130.12 "/>
<polygon fill="black" stroke="black" points="1316.7,-1125.09 1316.32,-1135.08 1314.32,-1135.01 1314.7,-1125.01 1316.7,-1125.09"/>
<polyline fill="none" stroke="black" points="1317.51,-1130.12 1312.51,-1129.93 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AudioControl -->
<g id="node7" class="node">
<title>aind_behavior_vr_foraging.task_logic.AudioControl</title>
<g id="a_node7"><a xlink:title="aind_behavior_vr_foraging.task_logic.AudioControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1374.5,-59.5 1374.5,-80.5 1466.5,-80.5 1466.5,-59.5 1374.5,-59.5"/>
<text text-anchor="start" x="1380" y="-67.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AudioControl</text>
<polygon fill="none" stroke="black" points="1374.5,-38.5 1374.5,-59.5 1435.5,-59.5 1435.5,-38.5 1374.5,-38.5"/>
<text text-anchor="start" x="1382" y="-45.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">duration</text>
<polygon fill="none" stroke="black" points="1435.5,-38.5 1435.5,-59.5 1466.5,-59.5 1466.5,-38.5 1435.5,-38.5"/>
<text text-anchor="start" x="1438.5" y="-45.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1374.5,-17.5 1374.5,-38.5 1435.5,-38.5 1435.5,-17.5 1374.5,-17.5"/>
<text text-anchor="start" x="1377.5" y="-24.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">frequency</text>
<polygon fill="none" stroke="black" points="1435.5,-17.5 1435.5,-38.5 1466.5,-38.5 1466.5,-17.5 1435.5,-17.5"/>
<text text-anchor="start" x="1438.5" y="-24.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.AudioControl -->
<g id="edge19" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.AudioControl:w</title>
<path fill="none" stroke="black" d="M1137.16,-309.99C1227,-300.54 1154.13,-161.24 1235,-99.5 1280.79,-64.54 1306.13,-69.29 1358.41,-70.34"/>
<polyline fill="none" stroke="black" points="1127,-310.5 1131.99,-310.25 "/>
<polyline fill="none" stroke="black" points="1131.99,-310.25 1136.99,-310 "/>
<polyline fill="none" stroke="black" points="1373.5,-70.5 1368.5,-70.45 "/>
<polygon fill="black" stroke="black" points="1367.55,-65.44 1367.45,-75.44 1365.45,-75.41 1365.55,-65.42 1367.55,-65.44"/>
<polyline fill="none" stroke="black" points="1368.5,-70.45 1363.5,-70.39 "/>
<polygon fill="black" stroke="black" points="1362.55,-65.38 1362.45,-75.38 1360.45,-75.36 1360.55,-65.36 1362.55,-65.38"/>
<polyline fill="none" stroke="black" points="1363.5,-70.39 1358.5,-70.34 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.MovableSpoutControl -->
<g id="node26" class="node">
<title>aind_behavior_vr_foraging.task_logic.MovableSpoutControl</title>
<g id="a_node26"><a xlink:title="aind_behavior_vr_foraging.task_logic.MovableSpoutControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1321.5,-462.5 1321.5,-483.5 1519.5,-483.5 1519.5,-462.5 1321.5,-462.5"/>
<text text-anchor="start" x="1355.5" y="-470.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">MovableSpoutControl</text>
<polygon fill="none" stroke="black" points="1321.5,-441.5 1321.5,-462.5 1488.5,-462.5 1488.5,-441.5 1321.5,-441.5"/>
<text text-anchor="start" x="1383.5" y="-448.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">enabled</text>
<polygon fill="none" stroke="black" points="1488.5,-441.5 1488.5,-462.5 1519.5,-462.5 1519.5,-441.5 1488.5,-441.5"/>
<text text-anchor="start" x="1491.5" y="-448.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="1321.5,-420.5 1321.5,-441.5 1488.5,-441.5 1488.5,-420.5 1321.5,-420.5"/>
<text text-anchor="start" x="1324.5" y="-427.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">time_to_collect_after_reward</text>
<polygon fill="none" stroke="black" points="1488.5,-420.5 1488.5,-441.5 1519.5,-441.5 1519.5,-420.5 1488.5,-420.5"/>
<text text-anchor="start" x="1491.5" y="-427.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1321.5,-399.5 1321.5,-420.5 1488.5,-420.5 1488.5,-399.5 1321.5,-399.5"/>
<text text-anchor="start" x="1353.5" y="-406.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">retracting_distance</text>
<polygon fill="none" stroke="black" points="1488.5,-399.5 1488.5,-420.5 1519.5,-420.5 1519.5,-399.5 1488.5,-399.5"/>
<text text-anchor="start" x="1491.5" y="-406.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.MovableSpoutControl -->
<g id="edge20" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.MovableSpoutControl:w</title>
<path fill="none" stroke="black" d="M1137.1,-374.88C1218.84,-381.15 1226.71,-463.35 1305.51,-472.65"/>
<polyline fill="none" stroke="black" points="1127,-374.5 1132,-374.69 "/>
<polyline fill="none" stroke="black" points="1132,-374.69 1136.99,-374.87 "/>
<polyline fill="none" stroke="black" points="1320.5,-473.5 1315.51,-473.22 "/>
<polygon fill="black" stroke="black" points="1314.79,-468.17 1314.23,-478.15 1312.23,-478.04 1312.8,-468.05 1314.79,-468.17"/>
<polyline fill="none" stroke="black" points="1315.51,-473.22 1310.52,-472.93 "/>
<polygon fill="black" stroke="black" points="1309.8,-467.88 1309.23,-477.87 1307.24,-477.75 1307.81,-467.77 1309.8,-467.88"/>
<polyline fill="none" stroke="black" points="1310.52,-472.93 1305.52,-472.65 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OdorControl -->
<g id="node28" class="node">
<title>aind_behavior_vr_foraging.task_logic.OdorControl</title>
<g id="a_node28"><a xlink:title="aind_behavior_vr_foraging.task_logic.OdorControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1331.5,-341.5 1331.5,-362.5 1509.5,-362.5 1509.5,-341.5 1331.5,-341.5"/>
<text text-anchor="start" x="1382" y="-349.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OdorControl</text>
<polygon fill="none" stroke="black" points="1331.5,-320.5 1331.5,-341.5 1478.5,-341.5 1478.5,-320.5 1331.5,-320.5"/>
<text text-anchor="start" x="1342.5" y="-327.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">valve_max_open_time</text>
<polygon fill="none" stroke="black" points="1478.5,-320.5 1478.5,-341.5 1509.5,-341.5 1509.5,-320.5 1478.5,-320.5"/>
<text text-anchor="start" x="1481.5" y="-327.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1331.5,-299.5 1331.5,-320.5 1478.5,-320.5 1478.5,-299.5 1331.5,-299.5"/>
<text text-anchor="start" x="1358" y="-306.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">target_total_flow</text>
<polygon fill="none" stroke="black" points="1478.5,-299.5 1478.5,-320.5 1509.5,-320.5 1509.5,-299.5 1478.5,-299.5"/>
<text text-anchor="start" x="1481.5" y="-306.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1331.5,-278.5 1331.5,-299.5 1478.5,-299.5 1478.5,-278.5 1331.5,-278.5"/>
<text text-anchor="start" x="1334.5" y="-285.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">use_channel_3_as_carrier</text>
<polygon fill="none" stroke="black" points="1478.5,-278.5 1478.5,-299.5 1509.5,-299.5 1509.5,-278.5 1478.5,-278.5"/>
<text text-anchor="start" x="1481.5" y="-285.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="1331.5,-257.5 1331.5,-278.5 1478.5,-278.5 1478.5,-257.5 1331.5,-257.5"/>
<text text-anchor="start" x="1358" y="-264.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">target_odor_flow</text>
<polygon fill="none" stroke="black" points="1478.5,-257.5 1478.5,-278.5 1509.5,-278.5 1509.5,-257.5 1478.5,-257.5"/>
<text text-anchor="start" x="1481.5" y="-264.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorControl -->
<g id="edge21" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorControl:w</title>
<path fill="none" stroke="black" d="M1137.05,-352.5C1214.29,-352.5 1240.35,-352.5 1315.36,-352.5"/>
<polyline fill="none" stroke="black" points="1127,-352.5 1132,-352.5 "/>
<polyline fill="none" stroke="black" points="1132,-352.5 1137,-352.5 "/>
<polyline fill="none" stroke="black" points="1330.5,-352.5 1325.5,-352.5 "/>
<polygon fill="black" stroke="black" points="1324.5,-347.5 1324.5,-357.5 1322.5,-357.5 1322.5,-347.5 1324.5,-347.5"/>
<polyline fill="none" stroke="black" points="1325.5,-352.5 1320.5,-352.5 "/>
<polygon fill="black" stroke="black" points="1319.5,-347.5 1319.5,-357.5 1317.5,-357.5 1317.5,-347.5 1319.5,-347.5"/>
<polyline fill="none" stroke="black" points="1320.5,-352.5 1315.5,-352.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl -->
<g id="node31" class="node">
<title>aind_behavior_vr_foraging.task_logic.PositionControl</title>
<g id="a_node31"><a xlink:title="aind_behavior_vr_foraging.task_logic.PositionControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1329.5,-200.5 1329.5,-221.5 1511.5,-221.5 1511.5,-200.5 1329.5,-200.5"/>
<text text-anchor="start" x="1374.5" y="-208.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PositionControl</text>
<polygon fill="none" stroke="black" points="1329.5,-179.5 1329.5,-200.5 1462.5,-200.5 1462.5,-179.5 1329.5,-179.5"/>
<text text-anchor="start" x="1384" y="-186.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">gain</text>
<polygon fill="none" stroke="black" points="1462.5,-179.5 1462.5,-200.5 1511.5,-200.5 1511.5,-179.5 1462.5,-179.5"/>
<text text-anchor="start" x="1465.5" y="-186.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="1329.5,-158.5 1329.5,-179.5 1462.5,-179.5 1462.5,-158.5 1329.5,-158.5"/>
<text text-anchor="start" x="1355" y="-165.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">initial_position</text>
<polygon fill="none" stroke="black" points="1462.5,-158.5 1462.5,-179.5 1511.5,-179.5 1511.5,-158.5 1462.5,-158.5"/>
<text text-anchor="start" x="1465.5" y="-165.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="1329.5,-137.5 1329.5,-158.5 1462.5,-158.5 1462.5,-137.5 1329.5,-137.5"/>
<text text-anchor="start" x="1332.5" y="-144.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">frequency_filter_cutoff</text>
<polygon fill="none" stroke="black" points="1462.5,-137.5 1462.5,-158.5 1511.5,-158.5 1511.5,-137.5 1462.5,-137.5"/>
<text text-anchor="start" x="1474.5" y="-144.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1329.5,-116.5 1329.5,-137.5 1462.5,-137.5 1462.5,-116.5 1329.5,-116.5"/>
<text text-anchor="start" x="1345.5" y="-123.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">velocity_threshold</text>
<polygon fill="none" stroke="black" points="1462.5,-116.5 1462.5,-137.5 1511.5,-137.5 1511.5,-116.5 1462.5,-116.5"/>
<text text-anchor="start" x="1474.5" y="-123.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.PositionControl -->
<g id="edge22" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PositionControl:w</title>
<path fill="none" stroke="black" d="M1136.99,-330.93C1188.86,-324.7 1183.05,-268.91 1235,-240.5 1268.25,-222.31 1281.51,-213.81 1313.13,-211.91"/>
<polyline fill="none" stroke="black" points="1127,-331.5 1131.99,-331.22 "/>
<polyline fill="none" stroke="black" points="1131.99,-331.22 1136.98,-330.93 "/>
<polyline fill="none" stroke="black" points="1328.5,-211.5 1323.5,-211.63 "/>
<polygon fill="black" stroke="black" points="1322.37,-206.66 1322.64,-216.66 1320.64,-216.71 1320.37,-206.72 1322.37,-206.66"/>
<polyline fill="none" stroke="black" points="1323.5,-211.63 1318.5,-211.77 "/>
<polygon fill="black" stroke="black" points="1317.37,-206.8 1317.64,-216.8 1315.64,-216.85 1315.37,-206.85 1317.37,-206.8"/>
<polyline fill="none" stroke="black" points="1318.5,-211.77 1313.51,-211.9 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings -->
<g id="node17" class="node">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings</title>
<g id="a_node17"><a xlink:title="aind_behavior_vr_foraging.task_logic.DebugSettings&#10;&#10;This class is not currently implemented&#10;">
<polygon fill="none" stroke="black" points="2030,-598.5 2030,-619.5 2284,-619.5 2284,-598.5 2030,-598.5"/>
<text text-anchor="start" x="2115" y="-606.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">DebugSettings</text>
<polygon fill="none" stroke="black" points="2030,-577.5 2030,-598.5 2124,-598.5 2124,-577.5 2030,-577.5"/>
<text text-anchor="start" x="2047" y="-584.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="2124,-577.5 2124,-598.5 2284,-598.5 2284,-577.5 2124,-577.5"/>
<text text-anchor="start" x="2127" y="-584.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.DEBUG]</text>
<polygon fill="none" stroke="black" points="2030,-556.5 2030,-577.5 2124,-577.5 2124,-556.5 2030,-556.5"/>
<text text-anchor="start" x="2033" y="-563.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">visual_corridors</text>
<polygon fill="none" stroke="black" points="2124,-556.5 2124,-577.5 2284,-577.5 2284,-556.5 2124,-556.5"/>
<text text-anchor="start" x="2148" y="-563.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[VisualCorridor]</text>
<polygon fill="none" stroke="black" points="2030,-535.5 2030,-556.5 2124,-556.5 2124,-535.5 2030,-535.5"/>
<text text-anchor="start" x="2043.5" y="-542.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">virtual_sites</text>
<polygon fill="none" stroke="black" points="2124,-535.5 2124,-556.5 2284,-556.5 2284,-535.5 2124,-535.5"/>
<text text-anchor="start" x="2159.5" y="-542.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[VirtualSite]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.DebugSettings -->
<g id="edge37" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.DebugSettings:w</title>
<path fill="none" stroke="black" d="M1616.1,-569.54C1791.5,-570.89 1840.85,-607.38 2013.83,-609.41"/>
<polyline fill="none" stroke="black" points="1606,-569.5 1611,-569.52 "/>
<polyline fill="none" stroke="black" points="1611,-569.52 1616,-569.54 "/>
<polyline fill="none" stroke="black" points="2029,-609.5 2024,-609.47 "/>
<polygon fill="black" stroke="black" points="2023.03,-604.47 2022.97,-614.47 2020.97,-614.45 2021.03,-604.45 2023.03,-604.47"/>
<polyline fill="none" stroke="black" points="2024,-609.47 2019,-609.44 "/>
<polygon fill="black" stroke="black" points="2018.03,-604.44 2017.97,-614.44 2015.97,-614.42 2016.03,-604.42 2018.03,-604.44"/>
<polyline fill="none" stroke="black" points="2019,-609.44 2014,-609.41 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.ForagingSettings -->
<g id="node21" class="node">
<title>aind_behavior_vr_foraging.task_logic.ForagingSettings</title>
<g id="a_node21"><a xlink:title="aind_behavior_vr_foraging.task_logic.ForagingSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2033,-235.5 2033,-256.5 2282,-256.5 2282,-235.5 2033,-235.5"/>
<text text-anchor="start" x="2108" y="-243.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ForagingSettings</text>
<polygon fill="none" stroke="black" points="2033,-214.5 2033,-235.5 2099,-235.5 2099,-214.5 2033,-214.5"/>
<text text-anchor="start" x="2036" y="-221.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="2099,-214.5 2099,-235.5 2282,-235.5 2282,-214.5 2099,-214.5"/>
<text text-anchor="start" x="2102" y="-221.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.FORAGING]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.ForagingSettings -->
<g id="edge38" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.ForagingSettings:w</title>
<path fill="none" stroke="black" d="M1616.19,-569.08C1734.92,-558.91 1609.72,-364.9 1714,-283.5 1822.11,-199.11 1885.06,-243.03 2016.88,-246.31"/>
<polyline fill="none" stroke="black" points="1606,-569.5 1611,-569.3 "/>
<polyline fill="none" stroke="black" points="1611,-569.3 1615.99,-569.09 "/>
<polyline fill="none" stroke="black" points="2032,-246.5 2027,-246.44 "/>
<polygon fill="black" stroke="black" points="2026.06,-241.43 2025.94,-251.42 2023.94,-251.4 2024.06,-241.4 2026.06,-241.43"/>
<polyline fill="none" stroke="black" points="2027,-246.44 2022,-246.37 "/>
<polygon fill="black" stroke="black" points="2021.06,-241.36 2020.94,-251.36 2018.94,-251.34 2019.06,-241.34 2021.06,-241.36"/>
<polyline fill="none" stroke="black" points="2022,-246.37 2017,-246.31 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.HabituationSettings -->
<g id="node22" class="node">
<title>aind_behavior_vr_foraging.task_logic.HabituationSettings</title>
<g id="a_node22"><a xlink:title="aind_behavior_vr_foraging.task_logic.HabituationSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3136,-220.5 3136,-241.5 3458,-241.5 3458,-220.5 3136,-220.5"/>
<text text-anchor="start" x="3238.5" y="-228.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">HabituationSettings</text>
<polygon fill="none" stroke="black" points="3136,-199.5 3136,-220.5 3253,-220.5 3253,-199.5 3136,-199.5"/>
<text text-anchor="start" x="3164.5" y="-206.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="3253,-199.5 3253,-220.5 3458,-220.5 3458,-199.5 3253,-199.5"/>
<text text-anchor="start" x="3256" y="-206.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.HABITUATION]</text>
<polygon fill="none" stroke="black" points="3136,-178.5 3136,-199.5 3253,-199.5 3253,-178.5 3136,-178.5"/>
<text text-anchor="start" x="3141.5" y="-185.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distance_to_reward</text>
<polygon fill="none" stroke="black" points="3253,-178.5 3253,-199.5 3458,-199.5 3458,-178.5 3253,-178.5"/>
<text text-anchor="start" x="3322.5" y="-185.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="3136,-157.5 3136,-178.5 3253,-178.5 3253,-157.5 3136,-157.5"/>
<text text-anchor="start" x="3139" y="-164.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="3253,-157.5 3253,-178.5 3458,-178.5 3458,-157.5 3253,-157.5"/>
<text text-anchor="start" x="3300" y="-164.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.HabituationSettings -->
<g id="edge39" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.HabituationSettings:w</title>
<path fill="none" stroke="black" d="M1615.99,-569.05C1660.04,-564.92 1666.85,-533.32 1714,-517.5 2014.82,-416.61 2788.98,-237.21 3120.55,-231.63"/>
<polyline fill="none" stroke="black" points="1606,-569.5 1610.99,-569.28 "/>
<polyline fill="none" stroke="black" points="1610.99,-569.28 1615.99,-569.05 "/>
<polyline fill="none" stroke="black" points="3136,-231.5 3131,-231.54 "/>
<polygon fill="black" stroke="black" points="3129.96,-226.55 3130.04,-236.55 3128.04,-236.57 3127.96,-226.57 3129.96,-226.55"/>
<polyline fill="none" stroke="black" points="3131,-231.54 3126,-231.59 "/>
<polygon fill="black" stroke="black" points="3124.96,-226.6 3125.04,-236.59 3123.04,-236.61 3122.96,-226.61 3124.96,-226.6"/>
<polyline fill="none" stroke="black" points="3126,-231.59 3121,-231.63 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition -->
<g id="node9" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition</title>
<g id="a_node9"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndCondition&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="1714,-966.5 1714,-987.5 2600,-987.5 2600,-966.5 1714,-966.5"/>
<text text-anchor="start" x="2099.5" y="-974.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndCondition</text>
<polygon fill="none" stroke="black" points="1714,-945.5 1714,-966.5 1742,-966.5 1742,-945.5 1714,-945.5"/>
<text text-anchor="start" x="1717" y="-952.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="1742,-945.5 1742,-966.5 2600,-966.5 2600,-945.5 1742,-945.5"/>
<text text-anchor="start" x="1745" y="-952.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[BlockEndConditionDuration, BlockEndConditionDistance, BlockEndConditionChoice, BlockEndConditionReward, BlockEndConditionPatchCount]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Block&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndCondition -->
<g id="edge6" class="edge">
<title>aind_behavior_vr_foraging.task_logic.Block:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndCondition:w</title>
<path fill="none" stroke="black" d="M1568.76,-924.87C1627.6,-929.18 1642.36,-970.27 1698.72,-976.67"/>
<polyline fill="none" stroke="black" points="1558.5,-924.5 1563.5,-924.68 "/>
<polyline fill="none" stroke="black" points="1563.5,-924.68 1568.49,-924.86 "/>
<polygon fill="black" stroke="black" points="1704.01,-976.95 1713.75,-981.99 1709.01,-977.23 1714,-977.5 1714,-977.5 1714,-977.5 1709.01,-977.23 1714.25,-973.01 1704.01,-976.95 1704.01,-976.95"/>
<polyline fill="none" stroke="black" points="1704.01,-976.95 1699.02,-976.68 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.EnvironmentStatistics -->
<g id="node10" class="node">
<title>aind_behavior_vr_foraging.task_logic.EnvironmentStatistics</title>
<g id="a_node10"><a xlink:title="aind_behavior_vr_foraging.task_logic.EnvironmentStatistics&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2036,-1255.5 2036,-1276.5 2278,-1276.5 2278,-1255.5 2036,-1255.5"/>
<text text-anchor="start" x="2092" y="-1263.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">EnvironmentStatistics</text>
<polygon fill="none" stroke="black" points="2036,-1234.5 2036,-1255.5 2160,-1255.5 2160,-1234.5 2036,-1234.5"/>
<text text-anchor="start" x="2077.5" y="-1241.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">patches</text>
<polygon fill="none" stroke="black" points="2160,-1234.5 2160,-1255.5 2278,-1255.5 2278,-1234.5 2160,-1234.5"/>
<text text-anchor="start" x="2164.5" y="-1241.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[PatchStatistics]</text>
<polygon fill="none" stroke="black" points="2036,-1213.5 2036,-1234.5 2160,-1234.5 2160,-1213.5 2036,-1213.5"/>
<text text-anchor="start" x="2051" y="-1220.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">transition_matrix</text>
<polygon fill="none" stroke="black" points="2160,-1213.5 2160,-1234.5 2278,-1234.5 2278,-1213.5 2160,-1213.5"/>
<text text-anchor="start" x="2176.5" y="-1220.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[List[float]]</text>
<polygon fill="none" stroke="black" points="2036,-1192.5 2036,-1213.5 2160,-1213.5 2160,-1192.5 2036,-1192.5"/>
<text text-anchor="start" x="2039" y="-1199.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">first_state_occupancy</text>
<polygon fill="none" stroke="black" points="2160,-1192.5 2160,-1213.5 2278,-1213.5 2278,-1192.5 2160,-1192.5"/>
<text text-anchor="start" x="2163" y="-1199.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[List[float]]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Block&#45;&gt;aind_behavior_vr_foraging.task_logic.EnvironmentStatistics -->
<g id="edge7" class="edge">
<title>aind_behavior_vr_foraging.task_logic.Block:e&#45;&gt;aind_behavior_vr_foraging.task_logic.EnvironmentStatistics:w</title>
<path fill="none" stroke="black" d="M1568.79,-946.16C1692.73,-961.58 1894.19,-1243.17 2020.04,-1265.14"/>
<polyline fill="none" stroke="black" points="1558.5,-945.5 1563.49,-945.82 "/>
<polyline fill="none" stroke="black" points="1563.49,-945.82 1568.48,-946.14 "/>
<polyline fill="none" stroke="black" points="2035,-1266.5 2030.02,-1266.05 "/>
<polygon fill="black" stroke="black" points="2029.48,-1260.98 2028.57,-1270.94 2026.58,-1270.76 2027.48,-1260.8 2029.48,-1260.98"/>
<polyline fill="none" stroke="black" points="2030.02,-1266.05 2025.04,-1265.6 "/>
<polygon fill="black" stroke="black" points="2024.5,-1260.53 2023.59,-1270.49 2021.6,-1270.3 2022.51,-1260.35 2024.5,-1260.53"/>
<polyline fill="none" stroke="black" points="2025.04,-1265.6 2020.06,-1265.14 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndConditionChoice -->
<g id="node11" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndConditionChoice</title>
<g id="a_node11"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndConditionChoice&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2777,-1093.5 2777,-1114.5 2959,-1114.5 2959,-1093.5 2777,-1093.5"/>
<text text-anchor="start" x="2790.5" y="-1101.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndConditionChoice</text>
<polygon fill="none" stroke="black" points="2777,-1072.5 2777,-1093.5 2865,-1093.5 2865,-1072.5 2777,-1072.5"/>
<text text-anchor="start" x="2780" y="-1079.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">condition_type</text>
<polygon fill="none" stroke="black" points="2865,-1072.5 2865,-1093.5 2959,-1093.5 2959,-1072.5 2865,-1072.5"/>
<text text-anchor="start" x="2868" y="-1079.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;Choice&#39;]</text>
<polygon fill="none" stroke="black" points="2777,-1051.5 2777,-1072.5 2865,-1072.5 2865,-1051.5 2777,-1051.5"/>
<text text-anchor="start" x="2806" y="-1058.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="2865,-1051.5 2865,-1072.5 2959,-1072.5 2959,-1051.5 2865,-1051.5"/>
<text text-anchor="start" x="2879" y="-1058.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionChoice -->
<g id="edge8" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionChoice:w</title>
<path fill="none" stroke="black" d="M2610.06,-956.01C2695.71,-964.99 2679.26,-1089.69 2760.82,-1103.3"/>
<polyline fill="none" stroke="black" points="2600,-955.5 2604.99,-955.75 "/>
<polyline fill="none" stroke="black" points="2604.99,-955.75 2609.99,-956.01 "/>
<polyline fill="none" stroke="black" points="2776,-1104.5 2771.02,-1104.1 "/>
<polygon fill="black" stroke="black" points="2770.41,-1099.04 2769.62,-1109.01 2767.63,-1108.85 2768.42,-1098.88 2770.41,-1099.04"/>
<polyline fill="none" stroke="black" points="2771.02,-1104.1 2766.03,-1103.71 "/>
<polygon fill="black" stroke="black" points="2765.43,-1098.65 2764.64,-1108.62 2762.65,-1108.46 2763.44,-1098.49 2765.43,-1098.65"/>
<polyline fill="none" stroke="black" points="2766.03,-1103.71 2761.05,-1103.31 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndConditionDistance -->
<g id="node12" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndConditionDistance</title>
<g id="a_node12"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndConditionDistance&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2773,-994.5 2773,-1015.5 2964,-1015.5 2964,-994.5 2773,-994.5"/>
<text text-anchor="start" x="2786" y="-1002.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndConditionDistance</text>
<polygon fill="none" stroke="black" points="2773,-973.5 2773,-994.5 2861,-994.5 2861,-973.5 2773,-973.5"/>
<text text-anchor="start" x="2776" y="-980.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">condition_type</text>
<polygon fill="none" stroke="black" points="2861,-973.5 2861,-994.5 2964,-994.5 2964,-973.5 2861,-973.5"/>
<text text-anchor="start" x="2864" y="-980.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;Distance&#39;]</text>
<polygon fill="none" stroke="black" points="2773,-952.5 2773,-973.5 2861,-973.5 2861,-952.5 2773,-952.5"/>
<text text-anchor="start" x="2802" y="-959.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="2861,-952.5 2861,-973.5 2964,-973.5 2964,-952.5 2861,-952.5"/>
<text text-anchor="start" x="2879.5" y="-959.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionDistance -->
<g id="edge9" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionDistance:w</title>
<path fill="none" stroke="black" d="M2610.34,-955.79C2675.93,-959.6 2693.57,-999.29 2756.83,-1004.85"/>
<polyline fill="none" stroke="black" points="2600,-955.5 2605,-955.64 "/>
<polyline fill="none" stroke="black" points="2605,-955.64 2610,-955.78 "/>
<polyline fill="none" stroke="black" points="2772,-1005.5 2767,-1005.29 "/>
<polygon fill="black" stroke="black" points="2766.22,-1000.25 2765.79,-1010.24 2763.79,-1010.16 2764.22,-1000.16 2766.22,-1000.25"/>
<polyline fill="none" stroke="black" points="2767,-1005.29 2762.01,-1005.07 "/>
<polygon fill="black" stroke="black" points="2761.22,-1000.04 2760.8,-1010.03 2758.8,-1009.94 2759.22,-999.95 2761.22,-1000.04"/>
<polyline fill="none" stroke="black" points="2762.01,-1005.07 2757.01,-1004.86 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndConditionDuration -->
<g id="node13" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndConditionDuration</title>
<g id="a_node13"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndConditionDuration&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2772,-895.5 2772,-916.5 2964,-916.5 2964,-895.5 2772,-895.5"/>
<text text-anchor="start" x="2784" y="-903.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndConditionDuration</text>
<polygon fill="none" stroke="black" points="2772,-874.5 2772,-895.5 2860,-895.5 2860,-874.5 2772,-874.5"/>
<text text-anchor="start" x="2775" y="-881.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">condition_type</text>
<polygon fill="none" stroke="black" points="2860,-874.5 2860,-895.5 2964,-895.5 2964,-874.5 2860,-874.5"/>
<text text-anchor="start" x="2863" y="-881.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;Duration&#39;]</text>
<polygon fill="none" stroke="black" points="2772,-853.5 2772,-874.5 2860,-874.5 2860,-853.5 2772,-853.5"/>
<text text-anchor="start" x="2801" y="-860.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="2860,-853.5 2860,-874.5 2964,-874.5 2964,-853.5 2860,-853.5"/>
<text text-anchor="start" x="2879" y="-860.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionDuration -->
<g id="edge10" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionDuration:w</title>
<path fill="none" stroke="black" d="M2610.27,-955.21C2675.42,-951.48 2693.09,-912.58 2755.93,-907.13"/>
<polyline fill="none" stroke="black" points="2600,-955.5 2605,-955.36 "/>
<polyline fill="none" stroke="black" points="2605,-955.36 2610,-955.22 "/>
<polyline fill="none" stroke="black" points="2771,-906.5 2766,-906.71 "/>
<polygon fill="black" stroke="black" points="2764.8,-901.76 2765.22,-911.75 2763.22,-911.83 2762.8,-901.84 2764.8,-901.76"/>
<polyline fill="none" stroke="black" points="2766,-906.71 2761.01,-906.92 "/>
<polygon fill="black" stroke="black" points="2759.8,-901.97 2760.22,-911.96 2758.22,-912.04 2757.8,-902.05 2759.8,-901.97"/>
<polyline fill="none" stroke="black" points="2761.01,-906.92 2756.01,-907.13 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndConditionPatchCount -->
<g id="node14" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndConditionPatchCount</title>
<g id="a_node14"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndConditionPatchCount&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2765,-796.5 2765,-817.5 2972,-817.5 2972,-796.5 2765,-796.5"/>
<text text-anchor="start" x="2776.5" y="-804.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndConditionPatchCount</text>
<polygon fill="none" stroke="black" points="2765,-775.5 2765,-796.5 2853,-796.5 2853,-775.5 2765,-775.5"/>
<text text-anchor="start" x="2768" y="-782.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">condition_type</text>
<polygon fill="none" stroke="black" points="2853,-775.5 2853,-796.5 2972,-796.5 2972,-775.5 2853,-775.5"/>
<text text-anchor="start" x="2856" y="-782.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;PatchCount&#39;]</text>
<polygon fill="none" stroke="black" points="2765,-754.5 2765,-775.5 2853,-775.5 2853,-754.5 2765,-754.5"/>
<text text-anchor="start" x="2794" y="-761.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="2853,-754.5 2853,-775.5 2972,-775.5 2972,-754.5 2853,-754.5"/>
<text text-anchor="start" x="2879.5" y="-761.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionPatchCount -->
<g id="edge11" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionPatchCount:w</title>
<path fill="none" stroke="black" d="M2610.14,-954.93C2691.15,-945.56 2672.02,-822.67 2749.04,-808.78"/>
<polyline fill="none" stroke="black" points="2600,-955.5 2604.99,-955.22 "/>
<polyline fill="none" stroke="black" points="2604.99,-955.22 2609.98,-954.94 "/>
<polyline fill="none" stroke="black" points="2764,-807.5 2759.02,-807.92 "/>
<polygon fill="black" stroke="black" points="2757.6,-803.03 2758.45,-812.99 2756.45,-813.16 2755.6,-803.2 2757.6,-803.03"/>
<polyline fill="none" stroke="black" points="2759.02,-807.92 2754.04,-808.35 "/>
<polygon fill="black" stroke="black" points="2752.61,-803.45 2753.46,-813.42 2751.47,-813.59 2750.62,-803.62 2752.61,-803.45"/>
<polyline fill="none" stroke="black" points="2754.04,-808.35 2749.05,-808.77 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndConditionReward -->
<g id="node15" class="node">
<title>aind_behavior_vr_foraging.task_logic.BlockEndConditionReward</title>
<g id="a_node15"><a xlink:title="aind_behavior_vr_foraging.task_logic.BlockEndConditionReward&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2775,-1192.5 2775,-1213.5 2961,-1213.5 2961,-1192.5 2775,-1192.5"/>
<text text-anchor="start" x="2787.5" y="-1200.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BlockEndConditionReward</text>
<polygon fill="none" stroke="black" points="2775,-1171.5 2775,-1192.5 2863,-1192.5 2863,-1171.5 2775,-1171.5"/>
<text text-anchor="start" x="2778" y="-1178.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">condition_type</text>
<polygon fill="none" stroke="black" points="2863,-1171.5 2863,-1192.5 2961,-1192.5 2961,-1171.5 2863,-1171.5"/>
<text text-anchor="start" x="2866" y="-1178.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;Reward&#39;]</text>
<polygon fill="none" stroke="black" points="2775,-1150.5 2775,-1171.5 2863,-1171.5 2863,-1150.5 2775,-1150.5"/>
<text text-anchor="start" x="2804" y="-1157.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="2863,-1150.5 2863,-1171.5 2961,-1171.5 2961,-1150.5 2863,-1150.5"/>
<text text-anchor="start" x="2879" y="-1157.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.BlockEndCondition&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionReward -->
<g id="edge12" class="edge">
<title>aind_behavior_vr_foraging.task_logic.BlockEndCondition:e&#45;&gt;aind_behavior_vr_foraging.task_logic.BlockEndConditionReward:w</title>
<path fill="none" stroke="black" d="M2610.18,-956.01C2724.87,-967.9 2649.68,-1184.59 2758.94,-1202.35"/>
<polyline fill="none" stroke="black" points="2600,-955.5 2604.99,-955.75 "/>
<polyline fill="none" stroke="black" points="2604.99,-955.75 2609.99,-956 "/>
<polyline fill="none" stroke="black" points="2774,-1203.5 2769.01,-1203.12 "/>
<polygon fill="black" stroke="black" points="2768.4,-1198.06 2767.64,-1208.03 2765.64,-1207.87 2766.41,-1197.9 2768.4,-1198.06"/>
<polyline fill="none" stroke="black" points="2769.01,-1203.12 2764.03,-1202.74 "/>
<polygon fill="black" stroke="black" points="2763.41,-1197.67 2762.65,-1207.64 2760.66,-1207.49 2761.42,-1197.52 2763.41,-1197.67"/>
<polyline fill="none" stroke="black" points="2764.03,-1202.74 2759.04,-1202.35 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics -->
<g id="node20" class="node">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics</title>
<g id="a_node20"><a xlink:title="aind_behavior_vr_foraging.task_logic.PatchStatistics&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2715,-1355.5 2715,-1376.5 3022,-1376.5 3022,-1355.5 2715,-1355.5"/>
<text text-anchor="start" x="2826" y="-1363.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PatchStatistics</text>
<polygon fill="none" stroke="black" points="2715,-1334.5 2715,-1355.5 2846,-1355.5 2846,-1334.5 2715,-1334.5"/>
<text text-anchor="start" x="2767" y="-1341.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="2846,-1334.5 2846,-1355.5 3022,-1355.5 3022,-1334.5 2846,-1334.5"/>
<text text-anchor="start" x="2927" y="-1341.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="2715,-1313.5 2715,-1334.5 2846,-1334.5 2846,-1313.5 2715,-1313.5"/>
<text text-anchor="start" x="2749.5" y="-1320.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">state_index</text>
<polygon fill="none" stroke="black" points="2846,-1313.5 2846,-1334.5 3022,-1334.5 3022,-1313.5 2846,-1313.5"/>
<text text-anchor="start" x="2926.5" y="-1320.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="2715,-1292.5 2715,-1313.5 2846,-1313.5 2846,-1292.5 2715,-1292.5"/>
<text text-anchor="start" x="2730" y="-1299.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_specification</text>
<polygon fill="none" stroke="black" points="2846,-1292.5 2846,-1313.5 3022,-1313.5 3022,-1292.5 2846,-1292.5"/>
<text text-anchor="start" x="2856" y="-1299.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OdorSpecification]</text>
<polygon fill="none" stroke="black" points="2715,-1271.5 2715,-1292.5 2846,-1292.5 2846,-1271.5 2715,-1271.5"/>
<text text-anchor="start" x="2723.5" y="-1278.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_specification</text>
<polygon fill="none" stroke="black" points="2846,-1271.5 2846,-1292.5 3022,-1292.5 3022,-1271.5 2846,-1271.5"/>
<text text-anchor="start" x="2849" y="-1278.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[RewardSpecification]</text>
<polygon fill="none" stroke="black" points="2715,-1250.5 2715,-1271.5 2846,-1271.5 2846,-1250.5 2715,-1250.5"/>
<text text-anchor="start" x="2718" y="-1257.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">virtual_site_generation</text>
<polygon fill="none" stroke="black" points="2846,-1250.5 2846,-1271.5 3022,-1271.5 3022,-1250.5 2846,-1250.5"/>
<text text-anchor="start" x="2874.5" y="-1257.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGeneration</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.EnvironmentStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchStatistics -->
<g id="edge16" class="edge">
<title>aind_behavior_vr_foraging.task_logic.EnvironmentStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchStatistics:w</title>
<path fill="none" stroke="black" d="M2289.14,-1245.6C2475.82,-1249.5 2514.76,-1360.41 2698.73,-1366.26"/>
<polyline fill="none" stroke="black" points="2279,-1245.5 2284,-1245.55 "/>
<polyline fill="none" stroke="black" points="2284,-1245.55 2289,-1245.6 "/>
<polygon fill="black" stroke="black" points="2704,-1366.34 2713.93,-1371 2709,-1366.42 2714,-1366.5 2714,-1366.5 2714,-1366.5 2709,-1366.42 2714.07,-1362 2704,-1366.34 2704,-1366.34"/>
<polyline fill="none" stroke="black" points="2704,-1366.34 2699,-1366.26 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.ConstantFunction -->
<g id="node16" class="node">
<title>aind_behavior_vr_foraging.task_logic.ConstantFunction</title>
<g id="a_node16"><a xlink:title="aind_behavior_vr_foraging.task_logic.ConstantFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4596,-1063.5 4596,-1084.5 4830,-1084.5 4830,-1063.5 4596,-1063.5"/>
<text text-anchor="start" x="4660.5" y="-1071.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ConstantFunction</text>
<polygon fill="none" stroke="black" points="4596,-1042.5 4596,-1063.5 4678,-1063.5 4678,-1042.5 4596,-1042.5"/>
<text text-anchor="start" x="4599" y="-1049.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4678,-1042.5 4678,-1063.5 4830,-1063.5 4830,-1042.5 4678,-1042.5"/>
<text text-anchor="start" x="4681" y="-1049.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;ConstantFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4596,-1021.5 4596,-1042.5 4678,-1042.5 4678,-1021.5 4596,-1021.5"/>
<text text-anchor="start" x="4622" y="-1028.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="4678,-1021.5 4678,-1042.5 4830,-1042.5 4830,-1021.5 4678,-1021.5"/>
<text text-anchor="start" x="4741.5" y="-1028.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite -->
<g id="node18" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite</title>
<g id="a_node18"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSite&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2708,-534.5 2708,-555.5 3028,-555.5 3028,-534.5 2708,-534.5"/>
<text text-anchor="start" x="2836" y="-542.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSite</text>
<polygon fill="none" stroke="black" points="2708,-513.5 2708,-534.5 2840,-534.5 2840,-513.5 2708,-513.5"/>
<text text-anchor="start" x="2768.5" y="-520.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">id</text>
<polygon fill="none" stroke="black" points="2840,-513.5 2840,-534.5 3028,-534.5 3028,-513.5 2840,-513.5"/>
<text text-anchor="start" x="2926.5" y="-520.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="2708,-492.5 2708,-513.5 2840,-513.5 2840,-492.5 2708,-492.5"/>
<text text-anchor="start" x="2760.5" y="-499.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="2840,-492.5 2840,-513.5 3028,-513.5 3028,-492.5 2840,-492.5"/>
<text text-anchor="start" x="2886.5" y="-499.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteLabels</text>
<polygon fill="none" stroke="black" points="2708,-471.5 2708,-492.5 2840,-492.5 2840,-471.5 2708,-471.5"/>
<text text-anchor="start" x="2757" y="-478.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length</text>
<polygon fill="none" stroke="black" points="2840,-471.5 2840,-492.5 3028,-492.5 3028,-471.5 2840,-471.5"/>
<text text-anchor="start" x="2921.5" y="-478.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2708,-450.5 2708,-471.5 2840,-471.5 2840,-450.5 2708,-450.5"/>
<text text-anchor="start" x="2737" y="-457.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">start_position</text>
<polygon fill="none" stroke="black" points="2840,-450.5 2840,-471.5 3028,-471.5 3028,-450.5 2840,-450.5"/>
<text text-anchor="start" x="2921.5" y="-457.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2708,-429.5 2708,-450.5 2840,-450.5 2840,-429.5 2708,-429.5"/>
<text text-anchor="start" x="2723.5" y="-436.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_specification</text>
<polygon fill="none" stroke="black" points="2840,-429.5 2840,-450.5 3028,-450.5 3028,-429.5 2840,-429.5"/>
<text text-anchor="start" x="2856" y="-436.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OdorSpecification]</text>
<polygon fill="none" stroke="black" points="2708,-408.5 2708,-429.5 2840,-429.5 2840,-408.5 2708,-408.5"/>
<text text-anchor="start" x="2717" y="-415.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_specification</text>
<polygon fill="none" stroke="black" points="2840,-408.5 2840,-429.5 3028,-429.5 3028,-408.5 2840,-408.5"/>
<text text-anchor="start" x="2849" y="-415.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[RewardSpecification]</text>
<polygon fill="none" stroke="black" points="2708,-387.5 2708,-408.5 2840,-408.5 2840,-387.5 2708,-387.5"/>
<text text-anchor="start" x="2718.5" y="-394.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="2840,-387.5 2840,-408.5 3028,-408.5 3028,-387.5 2840,-387.5"/>
<text text-anchor="start" x="2878.5" y="-394.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
<polygon fill="none" stroke="black" points="2708,-366.5 2708,-387.5 2840,-387.5 2840,-366.5 2708,-366.5"/>
<text text-anchor="start" x="2711" y="-373.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">treadmill_specification</text>
<polygon fill="none" stroke="black" points="2840,-366.5 2840,-387.5 3028,-387.5 3028,-366.5 2840,-366.5"/>
<text text-anchor="start" x="2843" y="-373.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TreadmillSpecification]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSite -->
<g id="edge14" class="edge">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSite:w</title>
<path fill="none" stroke="black" d="M2295.05,-545.5C2469.74,-545.5 2520.59,-545.5 2692.9,-545.5"/>
<polyline fill="none" stroke="black" points="2285,-545.5 2290,-545.5 "/>
<polyline fill="none" stroke="black" points="2290,-545.5 2295,-545.5 "/>
<polygon fill="black" stroke="black" points="2698,-545.5 2708,-550 2703,-545.5 2708,-545.5 2708,-545.5 2708,-545.5 2703,-545.5 2708,-541 2698,-545.5 2698,-545.5"/>
<polyline fill="none" stroke="black" points="2698,-545.5 2693,-545.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor -->
<g id="node19" class="node">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor</title>
<g id="a_node19"><a xlink:title="aind_behavior_vr_foraging.task_logic.VisualCorridor&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2789,-697.5 2789,-718.5 2948,-718.5 2948,-697.5 2789,-697.5"/>
<text text-anchor="start" x="2823.5" y="-705.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VisualCorridor</text>
<polygon fill="none" stroke="black" points="2789,-676.5 2789,-697.5 2869,-697.5 2869,-676.5 2789,-676.5"/>
<text text-anchor="start" x="2823.5" y="-683.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">id</text>
<polygon fill="none" stroke="black" points="2869,-676.5 2869,-697.5 2948,-697.5 2948,-676.5 2869,-676.5"/>
<text text-anchor="start" x="2901" y="-683.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="2789,-655.5 2789,-676.5 2869,-676.5 2869,-655.5 2789,-655.5"/>
<text text-anchor="start" x="2818" y="-662.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">size</text>
<polygon fill="none" stroke="black" points="2869,-655.5 2869,-676.5 2948,-676.5 2948,-655.5 2869,-655.5"/>
<text text-anchor="start" x="2896.5" y="-662.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Size</text>
<polygon fill="none" stroke="black" points="2789,-634.5 2789,-655.5 2869,-655.5 2869,-634.5 2789,-634.5"/>
<text text-anchor="start" x="2792" y="-641.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">start_position</text>
<polygon fill="none" stroke="black" points="2869,-634.5 2869,-655.5 2948,-655.5 2948,-634.5 2869,-634.5"/>
<text text-anchor="start" x="2896" y="-641.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2789,-613.5 2789,-634.5 2869,-634.5 2869,-613.5 2789,-613.5"/>
<text text-anchor="start" x="2812" y="-620.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length</text>
<polygon fill="none" stroke="black" points="2869,-613.5 2869,-634.5 2948,-634.5 2948,-613.5 2869,-613.5"/>
<text text-anchor="start" x="2896" y="-620.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2789,-592.5 2789,-613.5 2869,-613.5 2869,-592.5 2789,-592.5"/>
<text text-anchor="start" x="2807.5" y="-599.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">textures</text>
<polygon fill="none" stroke="black" points="2869,-592.5 2869,-613.5 2948,-613.5 2948,-592.5 2869,-592.5"/>
<text text-anchor="start" x="2872" y="-599.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">WallTextures</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.VisualCorridor -->
<g id="edge15" class="edge">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VisualCorridor:w</title>
<path fill="none" stroke="black" d="M2295.08,-566.59C2513.44,-570.54 2557.19,-702.37 2772.86,-708.29"/>
<polyline fill="none" stroke="black" points="2285,-566.5 2290,-566.54 "/>
<polyline fill="none" stroke="black" points="2290,-566.54 2295,-566.59 "/>
<polygon fill="black" stroke="black" points="2778,-708.36 2787.94,-713 2783,-708.43 2788,-708.5 2788,-708.5 2788,-708.5 2783,-708.43 2788.06,-704 2778,-708.36 2778,-708.36"/>
<polyline fill="none" stroke="black" points="2778,-708.36 2773,-708.3 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="node23" class="node">
<title>aind_behavior_vr_foraging.task_logic.RenderSpecification</title>
<g id="a_node23"><a xlink:title="aind_behavior_vr_foraging.task_logic.RenderSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4167,-285.5 4167,-306.5 4304,-306.5 4304,-285.5 4167,-285.5"/>
<text text-anchor="start" x="4176.5" y="-293.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RenderSpecification</text>
<polygon fill="none" stroke="black" points="4167,-264.5 4167,-285.5 4216,-285.5 4216,-264.5 4167,-264.5"/>
<text text-anchor="start" x="4170" y="-271.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">contrast</text>
<polygon fill="none" stroke="black" points="4216,-264.5 4216,-285.5 4304,-285.5 4304,-264.5 4216,-264.5"/>
<text text-anchor="start" x="4219" y="-271.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge42" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M3038.22,-397.06C3080.59,-393.23 3089.21,-365.67 3136,-355.5 3579.03,-259.19 3704.66,-295.65 4150.68,-296.49"/>
<polyline fill="none" stroke="black" points="3028,-397.5 3033,-397.28 "/>
<polyline fill="none" stroke="black" points="3033,-397.28 3037.99,-397.07 "/>
<polyline fill="none" stroke="black" points="4166,-296.5 4161,-296.5 "/>
<polygon fill="black" stroke="black" points="4160,-291.49 4160,-301.49 4158,-301.49 4158,-291.49 4160,-291.49"/>
<polyline fill="none" stroke="black" points="4161,-296.5 4156,-296.49 "/>
<polygon fill="black" stroke="black" points="4155,-291.49 4155,-301.49 4153,-301.49 4153,-291.49 4155,-291.49"/>
<polyline fill="none" stroke="black" points="4156,-296.49 4151,-296.49 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="node29" class="node">
<title>aind_behavior_vr_foraging.task_logic.OdorSpecification</title>
<g id="a_node29"><a xlink:title="aind_behavior_vr_foraging.task_logic.OdorSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3241,-1261.5 3241,-1282.5 3353,-1282.5 3353,-1261.5 3241,-1261.5"/>
<text text-anchor="start" x="3244" y="-1269.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OdorSpecification</text>
<polygon fill="none" stroke="black" points="3241,-1240.5 3241,-1261.5 3321,-1261.5 3321,-1240.5 3241,-1240.5"/>
<text text-anchor="start" x="3265.5" y="-1247.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">index</text>
<polygon fill="none" stroke="black" points="3321,-1240.5 3321,-1261.5 3353,-1261.5 3353,-1240.5 3321,-1240.5"/>
<text text-anchor="start" x="3329.5" y="-1247.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="3241,-1219.5 3241,-1240.5 3321,-1240.5 3321,-1219.5 3241,-1219.5"/>
<text text-anchor="start" x="3244" y="-1226.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">concentration</text>
<polygon fill="none" stroke="black" points="3321,-1219.5 3321,-1240.5 3353,-1240.5 3353,-1219.5 3321,-1219.5"/>
<text text-anchor="start" x="3324.5" y="-1226.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="edge41" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification:w</title>
<path fill="none" stroke="black" d="M3038.19,-440.39C3168.65,-463.95 3089.91,-948.1 3136,-1081.5 3165.4,-1166.61 3146.39,-1258.92 3221.82,-1271.14"/>
<polyline fill="none" stroke="black" points="3028,-439.5 3032.98,-439.94 "/>
<polyline fill="none" stroke="black" points="3032.98,-439.94 3037.96,-440.37 "/>
<polyline fill="none" stroke="black" points="3240,-1272.5 3235.01,-1272.13 "/>
<polygon fill="black" stroke="black" points="3234.39,-1267.07 3233.64,-1277.04 3231.65,-1276.89 3232.4,-1266.92 3234.39,-1267.07"/>
<polyline fill="none" stroke="black" points="3235.01,-1272.13 3230.03,-1271.75 "/>
<ellipse fill="none" stroke="black" cx="3226.04" cy="-1271.45" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="node34" class="node">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification</title>
<g id="a_node34"><a xlink:title="aind_behavior_vr_foraging.task_logic.RewardSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3180,-1042.5 3180,-1063.5 3414,-1063.5 3414,-1042.5 3180,-1042.5"/>
<text text-anchor="start" x="3236.5" y="-1050.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RewardSpecification</text>
<polygon fill="none" stroke="black" points="3180,-1021.5 3180,-1042.5 3276,-1042.5 3276,-1021.5 3180,-1021.5"/>
<text text-anchor="start" x="3190.5" y="-1028.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operant_logic</text>
<polygon fill="none" stroke="black" points="3276,-1021.5 3276,-1042.5 3414,-1042.5 3414,-1021.5 3276,-1021.5"/>
<text text-anchor="start" x="3279" y="-1028.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OperantLogic]</text>
<polygon fill="none" stroke="black" points="3180,-1000.5 3180,-1021.5 3276,-1021.5 3276,-1000.5 3180,-1000.5"/>
<text text-anchor="start" x="3213" y="-1007.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">delay</text>
<polygon fill="none" stroke="black" points="3276,-1000.5 3276,-1021.5 3414,-1021.5 3414,-1000.5 3276,-1000.5"/>
<text text-anchor="start" x="3312" y="-1007.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="3180,-979.5 3180,-1000.5 3276,-1000.5 3276,-979.5 3180,-979.5"/>
<text text-anchor="start" x="3183" y="-986.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_function</text>
<polygon fill="none" stroke="black" points="3276,-979.5 3276,-1000.5 3414,-1000.5 3414,-979.5 3276,-979.5"/>
<text text-anchor="start" x="3284.5" y="-986.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PatchRewardFunction</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="edge43" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification:w</title>
<path fill="none" stroke="black" d="M3038.3,-418.78C3301.67,-433.57 2910.76,-1025.97 3160.74,-1052.58"/>
<polyline fill="none" stroke="black" points="3028,-418.5 3033,-418.64 "/>
<polyline fill="none" stroke="black" points="3033,-418.64 3038,-418.77 "/>
<polyline fill="none" stroke="black" points="3179,-1053.5 3174.01,-1053.25 "/>
<polygon fill="black" stroke="black" points="3173.26,-1048.2 3172.76,-1058.19 3170.76,-1058.09 3171.26,-1048.1 3173.26,-1048.2"/>
<polyline fill="none" stroke="black" points="3174.01,-1053.25 3169.01,-1052.99 "/>
<ellipse fill="none" stroke="black" cx="3165.02" cy="-1052.79" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TreadmillSpecification -->
<g id="node40" class="node">
<title>aind_behavior_vr_foraging.task_logic.TreadmillSpecification</title>
<g id="a_node40"><a xlink:title="aind_behavior_vr_foraging.task_logic.TreadmillSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4148,-474.5 4148,-495.5 4322,-495.5 4322,-474.5 4148,-474.5"/>
<text text-anchor="start" x="4168.5" y="-482.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">TreadmillSpecification</text>
<polygon fill="none" stroke="black" points="4148,-453.5 4148,-474.5 4194,-474.5 4194,-453.5 4148,-453.5"/>
<text text-anchor="start" x="4151" y="-460.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">friction</text>
<polygon fill="none" stroke="black" points="4194,-453.5 4194,-474.5 4322,-474.5 4322,-453.5 4194,-453.5"/>
<text text-anchor="start" x="4197" y="-460.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[Distribution]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.TreadmillSpecification -->
<g id="edge44" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.TreadmillSpecification:w</title>
<path fill="none" stroke="black" d="M3038.17,-377.18C3097.02,-385.56 3073.78,-468.79 3136,-496.5 3266.73,-554.72 3314.89,-497.64 3458,-496.5 3758.12,-494.1 3837.58,-485.84 4128.88,-485.51"/>
<polyline fill="none" stroke="black" points="3028,-376.5 3032.99,-376.83 "/>
<polyline fill="none" stroke="black" points="3032.99,-376.83 3037.98,-377.17 "/>
<polyline fill="none" stroke="black" points="4147,-485.5 4142,-485.5 "/>
<polygon fill="black" stroke="black" points="4141,-480.5 4141,-490.5 4139,-490.5 4139,-480.5 4141,-480.5"/>
<polyline fill="none" stroke="black" points="4142,-485.5 4137,-485.51 "/>
<ellipse fill="none" stroke="black" cx="4133" cy="-485.51" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Size -->
<g id="node38" class="node">
<title>aind_behavior_vr_foraging.task_logic.Size</title>
<g id="a_node38"><a xlink:title="aind_behavior_vr_foraging.task_logic.Size&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4200,-635.5 4200,-656.5 4271,-656.5 4271,-635.5 4200,-635.5"/>
<text text-anchor="start" x="4223.5" y="-643.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Size</text>
<polygon fill="none" stroke="black" points="4200,-614.5 4200,-635.5 4240,-635.5 4240,-614.5 4200,-614.5"/>
<text text-anchor="start" x="4204.5" y="-621.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">width</text>
<polygon fill="none" stroke="black" points="4240,-614.5 4240,-635.5 4271,-635.5 4271,-614.5 4240,-614.5"/>
<text text-anchor="start" x="4243" y="-621.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4200,-593.5 4200,-614.5 4240,-614.5 4240,-593.5 4200,-593.5"/>
<text text-anchor="start" x="4203" y="-600.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">height</text>
<polygon fill="none" stroke="black" points="4240,-593.5 4240,-614.5 4271,-614.5 4271,-593.5 4240,-593.5"/>
<text text-anchor="start" x="4243" y="-600.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor&#45;&gt;aind_behavior_vr_foraging.task_logic.Size -->
<g id="edge51" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Size:w</title>
<path fill="none" stroke="black" d="M2959.19,-666.68C3036.05,-669.39 3054.52,-702.63 3136,-712.5 3278.07,-729.72 3315.03,-718.85 3458,-712.5 3618.32,-705.37 4009.84,-649.89 4183.85,-646.65"/>
<polyline fill="none" stroke="black" points="2949,-666.5 2954,-666.59 "/>
<polyline fill="none" stroke="black" points="2954,-666.59 2959,-666.67 "/>
<polyline fill="none" stroke="black" points="4199,-646.5 4194,-646.55 "/>
<polygon fill="black" stroke="black" points="4192.95,-641.56 4193.05,-651.56 4191.05,-651.58 4190.95,-641.58 4192.95,-641.56"/>
<polyline fill="none" stroke="black" points="4194,-646.55 4189,-646.6 "/>
<polygon fill="black" stroke="black" points="4187.95,-641.61 4188.05,-651.61 4186.05,-651.63 4185.95,-641.63 4187.95,-641.61"/>
<polyline fill="none" stroke="black" points="4189,-646.6 4184,-646.65 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures -->
<g id="node42" class="node">
<title>aind_behavior_vr_foraging.task_logic.WallTextures</title>
<g id="a_node42"><a xlink:title="aind_behavior_vr_foraging.task_logic.WallTextures&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3252,-672.5 3252,-693.5 3343,-693.5 3343,-672.5 3252,-672.5"/>
<text text-anchor="start" x="3258" y="-680.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">WallTextures</text>
<polygon fill="none" stroke="black" points="3252,-651.5 3252,-672.5 3295,-672.5 3295,-651.5 3252,-651.5"/>
<text text-anchor="start" x="3260" y="-658.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">floor</text>
<polygon fill="none" stroke="black" points="3295,-651.5 3295,-672.5 3343,-672.5 3343,-651.5 3295,-651.5"/>
<text text-anchor="start" x="3298" y="-658.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="3252,-630.5 3252,-651.5 3295,-651.5 3295,-630.5 3252,-630.5"/>
<text text-anchor="start" x="3255" y="-637.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ceiling</text>
<polygon fill="none" stroke="black" points="3295,-630.5 3295,-651.5 3343,-651.5 3343,-630.5 3295,-630.5"/>
<text text-anchor="start" x="3298" y="-637.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="3252,-609.5 3252,-630.5 3295,-630.5 3295,-609.5 3252,-609.5"/>
<text text-anchor="start" x="3264" y="-616.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left</text>
<polygon fill="none" stroke="black" points="3295,-609.5 3295,-630.5 3343,-630.5 3343,-609.5 3295,-609.5"/>
<text text-anchor="start" x="3298" y="-616.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="3252,-588.5 3252,-609.5 3295,-609.5 3295,-588.5 3252,-588.5"/>
<text text-anchor="start" x="3260.5" y="-595.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right</text>
<polygon fill="none" stroke="black" points="3295,-588.5 3295,-609.5 3343,-609.5 3343,-588.5 3295,-588.5"/>
<text text-anchor="start" x="3298" y="-595.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor&#45;&gt;aind_behavior_vr_foraging.task_logic.WallTextures -->
<g id="edge52" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor:e&#45;&gt;aind_behavior_vr_foraging.task_logic.WallTextures:w</title>
<path fill="none" stroke="black" d="M2959.37,-602.65C3084.32,-606.41 3113.41,-677.75 3235.99,-683.17"/>
<polyline fill="none" stroke="black" points="2949,-602.5 2954,-602.57 "/>
<polyline fill="none" stroke="black" points="2954,-602.57 2959,-602.65 "/>
<polyline fill="none" stroke="black" points="3251,-683.5 3246,-683.39 "/>
<polygon fill="black" stroke="black" points="3245.11,-678.37 3244.89,-688.37 3242.89,-688.32 3243.11,-678.33 3245.11,-678.37"/>
<polyline fill="none" stroke="black" points="3246,-683.39 3241,-683.28 "/>
<polygon fill="black" stroke="black" points="3240.11,-678.26 3239.89,-688.26 3237.89,-688.22 3238.11,-678.22 3240.11,-678.26"/>
<polyline fill="none" stroke="black" points="3241,-683.28 3236,-683.17 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="edge26" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification:w</title>
<path fill="none" stroke="black" d="M3033.27,-1302.39C3116,-1300.51 3142.56,-1276.19 3221.69,-1272.87"/>
<polyline fill="none" stroke="black" points="3023,-1302.5 3028,-1302.44 "/>
<polyline fill="none" stroke="black" points="3028,-1302.44 3033,-1302.39 "/>
<polyline fill="none" stroke="black" points="3240,-1272.5 3235,-1272.6 "/>
<polygon fill="black" stroke="black" points="3233.9,-1267.62 3234.1,-1277.62 3232.1,-1277.66 3231.9,-1267.66 3233.9,-1267.62"/>
<polyline fill="none" stroke="black" points="3235,-1272.6 3230,-1272.7 "/>
<ellipse fill="none" stroke="black" cx="3226" cy="-1272.79" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="edge27" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification:w</title>
<path fill="none" stroke="black" d="M3033.26,-1280.92C3134.74,-1269.04 3068.24,-1076.79 3160.89,-1055.43"/>
<polyline fill="none" stroke="black" points="3023,-1281.5 3027.99,-1281.22 "/>
<polyline fill="none" stroke="black" points="3027.99,-1281.22 3032.98,-1280.94 "/>
<polyline fill="none" stroke="black" points="3179,-1053.5 3174.03,-1054.03 "/>
<polygon fill="black" stroke="black" points="3172.51,-1049.16 3173.56,-1059.11 3171.57,-1059.32 3170.52,-1049.37 3172.51,-1049.16"/>
<polyline fill="none" stroke="black" points="3174.03,-1054.03 3169.06,-1054.56 "/>
<ellipse fill="none" stroke="black" cx="3165.08" cy="-1054.98" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration -->
<g id="node35" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration</title>
<g id="a_node35"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3175,-456.5 3175,-477.5 3420,-477.5 3420,-456.5 3175,-456.5"/>
<text text-anchor="start" x="3232.5" y="-464.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSiteGeneration</text>
<polygon fill="none" stroke="black" points="3175,-435.5 3175,-456.5 3245,-456.5 3245,-435.5 3175,-435.5"/>
<text text-anchor="start" x="3184.5" y="-442.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">inter_site</text>
<polygon fill="none" stroke="black" points="3245,-435.5 3245,-456.5 3420,-456.5 3420,-435.5 3245,-435.5"/>
<text text-anchor="start" x="3276" y="-442.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="3175,-414.5 3175,-435.5 3245,-435.5 3245,-414.5 3175,-414.5"/>
<text text-anchor="start" x="3179.5" y="-421.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">inter_patch</text>
<polygon fill="none" stroke="black" points="3245,-414.5 3245,-435.5 3420,-435.5 3420,-414.5 3245,-414.5"/>
<text text-anchor="start" x="3276" y="-421.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="3175,-393.5 3175,-414.5 3245,-414.5 3245,-393.5 3175,-393.5"/>
<text text-anchor="start" x="3180.5" y="-400.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">post_patch</text>
<polygon fill="none" stroke="black" points="3245,-393.5 3245,-414.5 3420,-414.5 3420,-393.5 3245,-393.5"/>
<text text-anchor="start" x="3248" y="-400.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[VirtualSiteGenerator]</text>
<polygon fill="none" stroke="black" points="3175,-372.5 3175,-393.5 3245,-393.5 3245,-372.5 3175,-372.5"/>
<text text-anchor="start" x="3178" y="-379.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_site</text>
<polygon fill="none" stroke="black" points="3245,-372.5 3245,-393.5 3420,-393.5 3420,-372.5 3245,-372.5"/>
<text text-anchor="start" x="3276" y="-379.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration -->
<g id="edge28" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:w</title>
<path fill="none" stroke="black" d="M3033.07,-1259.6C3189.54,-1230.73 3009.67,-512.99 3159.03,-469.55"/>
<polyline fill="none" stroke="black" points="3023,-1260.5 3027.98,-1260.06 "/>
<polyline fill="none" stroke="black" points="3027.98,-1260.06 3032.96,-1259.61 "/>
<polyline fill="none" stroke="black" points="3174,-467.5 3169.05,-468.18 "/>
<polygon fill="black" stroke="black" points="3167.38,-463.36 3168.74,-473.27 3166.75,-473.54 3165.39,-463.63 3167.38,-463.36"/>
<polyline fill="none" stroke="black" points="3169.05,-468.18 3164.09,-468.86 "/>
<polygon fill="black" stroke="black" points="3162.42,-464.04 3163.78,-473.95 3161.8,-474.22 3160.44,-464.31 3162.42,-464.04"/>
<polyline fill="none" stroke="black" points="3164.09,-468.86 3159.14,-469.54 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.HabituationSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge17" class="edge">
<title>aind_behavior_vr_foraging.task_logic.HabituationSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M3468.22,-167.54C3774.33,-170.21 3847.26,-292.46 4150.89,-296.4"/>
<polyline fill="none" stroke="black" points="3458,-167.5 3463,-167.52 "/>
<polyline fill="none" stroke="black" points="3463,-167.52 3468,-167.54 "/>
<polyline fill="none" stroke="black" points="4166,-296.5 4161,-296.47 "/>
<polygon fill="black" stroke="black" points="4160.03,-291.46 4159.97,-301.46 4157.97,-301.45 4158.03,-291.45 4160.03,-291.46"/>
<polyline fill="none" stroke="black" points="4161,-296.47 4156,-296.44 "/>
<polygon fill="black" stroke="black" points="4155.03,-291.43 4154.97,-301.43 4152.97,-301.42 4153.03,-291.42 4155.03,-291.43"/>
<polyline fill="none" stroke="black" points="4156,-296.44 4151,-296.4 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.LinearFunction -->
<g id="node24" class="node">
<title>aind_behavior_vr_foraging.task_logic.LinearFunction</title>
<g id="a_node24"><a xlink:title="aind_behavior_vr_foraging.task_logic.LinearFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4603,-964.5 4603,-985.5 4824,-985.5 4824,-964.5 4603,-964.5"/>
<text text-anchor="start" x="4668" y="-972.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LinearFunction</text>
<polygon fill="none" stroke="black" points="4603,-943.5 4603,-964.5 4685,-964.5 4685,-943.5 4603,-943.5"/>
<text text-anchor="start" x="4606" y="-950.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4685,-943.5 4685,-964.5 4824,-964.5 4824,-943.5 4685,-943.5"/>
<text text-anchor="start" x="4688" y="-950.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;LinearFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4603,-922.5 4603,-943.5 4685,-943.5 4685,-922.5 4603,-922.5"/>
<text text-anchor="start" x="4616.5" y="-929.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">minimum</text>
<polygon fill="none" stroke="black" points="4685,-922.5 4685,-943.5 4824,-943.5 4824,-922.5 4685,-922.5"/>
<text text-anchor="start" x="4742" y="-929.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-901.5 4603,-922.5 4685,-922.5 4685,-901.5 4603,-901.5"/>
<text text-anchor="start" x="4615" y="-908.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="4685,-901.5 4685,-922.5 4824,-922.5 4824,-901.5 4685,-901.5"/>
<text text-anchor="start" x="4742" y="-908.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-880.5 4603,-901.5 4685,-901.5 4685,-880.5 4603,-880.5"/>
<text text-anchor="start" x="4640.5" y="-887.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">a</text>
<polygon fill="none" stroke="black" points="4685,-880.5 4685,-901.5 4824,-901.5 4824,-880.5 4685,-880.5"/>
<text text-anchor="start" x="4742" y="-887.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-859.5 4603,-880.5 4685,-880.5 4685,-859.5 4603,-859.5"/>
<text text-anchor="start" x="4640.5" y="-866.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">b</text>
<polygon fill="none" stroke="black" points="4685,-859.5 4685,-880.5 4824,-880.5 4824,-859.5 4685,-859.5"/>
<text text-anchor="start" x="4742" y="-866.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.LookupTableFunction -->
<g id="node25" class="node">
<title>aind_behavior_vr_foraging.task_logic.LookupTableFunction</title>
<g id="a_node25"><a xlink:title="aind_behavior_vr_foraging.task_logic.LookupTableFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4584,-802.5 4584,-823.5 4842,-823.5 4842,-802.5 4584,-802.5"/>
<text text-anchor="start" x="4648" y="-810.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LookupTableFunction</text>
<polygon fill="none" stroke="black" points="4584,-781.5 4584,-802.5 4666,-802.5 4666,-781.5 4584,-781.5"/>
<text text-anchor="start" x="4587" y="-788.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4666,-781.5 4666,-802.5 4842,-802.5 4842,-781.5 4666,-781.5"/>
<text text-anchor="start" x="4669" y="-788.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;LookupTableFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4584,-760.5 4584,-781.5 4666,-781.5 4666,-760.5 4584,-760.5"/>
<text text-anchor="start" x="4602" y="-767.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">lut_keys</text>
<polygon fill="none" stroke="black" points="4666,-760.5 4666,-781.5 4842,-781.5 4842,-760.5 4666,-760.5"/>
<text text-anchor="start" x="4726.5" y="-767.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[float]</text>
<polygon fill="none" stroke="black" points="4584,-739.5 4584,-760.5 4666,-760.5 4666,-739.5 4584,-739.5"/>
<text text-anchor="start" x="4597" y="-746.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">lut_values</text>
<polygon fill="none" stroke="black" points="4666,-739.5 4666,-760.5 4842,-760.5 4842,-739.5 4666,-739.5"/>
<text text-anchor="start" x="4726.5" y="-746.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[float]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperantLogic -->
<g id="node30" class="node">
<title>aind_behavior_vr_foraging.task_logic.OperantLogic</title>
<g id="a_node30"><a xlink:title="aind_behavior_vr_foraging.task_logic.OperantLogic&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3639,-1089.5 3639,-1110.5 3814,-1110.5 3814,-1089.5 3639,-1089.5"/>
<text text-anchor="start" x="3685.5" y="-1097.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperantLogic</text>
<polygon fill="none" stroke="black" points="3639,-1068.5 3639,-1089.5 3783,-1089.5 3783,-1068.5 3639,-1068.5"/>
<text text-anchor="start" x="3682.5" y="-1075.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">is_operant</text>
<polygon fill="none" stroke="black" points="3783,-1068.5 3783,-1089.5 3814,-1089.5 3814,-1068.5 3783,-1068.5"/>
<text text-anchor="start" x="3786" y="-1075.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="3639,-1047.5 3639,-1068.5 3783,-1068.5 3783,-1047.5 3639,-1047.5"/>
<text text-anchor="start" x="3673.5" y="-1054.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stop_duration</text>
<polygon fill="none" stroke="black" points="3783,-1047.5 3783,-1068.5 3814,-1068.5 3814,-1047.5 3783,-1047.5"/>
<text text-anchor="start" x="3786" y="-1054.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="3639,-1026.5 3639,-1047.5 3783,-1047.5 3783,-1026.5 3639,-1026.5"/>
<text text-anchor="start" x="3646" y="-1033.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">time_to_collect_reward</text>
<polygon fill="none" stroke="black" points="3783,-1026.5 3783,-1047.5 3814,-1047.5 3814,-1026.5 3783,-1026.5"/>
<text text-anchor="start" x="3786" y="-1033.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="3639,-1005.5 3639,-1026.5 3783,-1026.5 3783,-1005.5 3639,-1005.5"/>
<text text-anchor="start" x="3642" y="-1012.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">grace_distance_threshold</text>
<polygon fill="none" stroke="black" points="3783,-1005.5 3783,-1026.5 3814,-1026.5 3814,-1005.5 3783,-1005.5"/>
<text text-anchor="start" x="3786" y="-1012.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="node36" class="node">
<title>aind_behavior_vr_foraging.task_logic.Vector3</title>
<g id="a_node36"><a xlink:title="aind_behavior_vr_foraging.task_logic.Vector3&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2131,-157.5 2131,-178.5 2183,-178.5 2183,-157.5 2131,-157.5"/>
<text text-anchor="start" x="2134" y="-165.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="2131,-136.5 2131,-157.5 2148,-157.5 2148,-136.5 2131,-136.5"/>
<text text-anchor="start" x="2136" y="-143.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">x</text>
<polygon fill="none" stroke="black" points="2148,-136.5 2148,-157.5 2183,-157.5 2183,-136.5 2148,-136.5"/>
<text text-anchor="start" x="2153" y="-143.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2131,-115.5 2131,-136.5 2148,-136.5 2148,-115.5 2131,-115.5"/>
<text text-anchor="start" x="2136" y="-122.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">y</text>
<polygon fill="none" stroke="black" points="2148,-115.5 2148,-136.5 2183,-136.5 2183,-115.5 2148,-115.5"/>
<text text-anchor="start" x="2153" y="-122.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2131,-94.5 2131,-115.5 2148,-115.5 2148,-94.5 2131,-94.5"/>
<text text-anchor="start" x="2136" y="-101.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">z</text>
<polygon fill="none" stroke="black" points="2148,-94.5 2148,-115.5 2183,-115.5 2183,-94.5 2148,-94.5"/>
<text text-anchor="start" x="2153" y="-101.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="edge29" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PositionControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3:w</title>
<path fill="none" stroke="black" d="M1522.86,-190.49C1783.82,-189.96 1856.13,-169.31 2114.73,-168.52"/>
<polyline fill="none" stroke="black" points="1512.5,-190.5 1517.5,-190.49 "/>
<polyline fill="none" stroke="black" points="1517.5,-190.49 1522.5,-190.49 "/>
<polyline fill="none" stroke="black" points="2130,-168.5 2125,-168.51 "/>
<polygon fill="black" stroke="black" points="2123.99,-163.51 2124.01,-173.51 2122.01,-173.51 2121.99,-163.51 2123.99,-163.51"/>
<polyline fill="none" stroke="black" points="2125,-168.51 2120,-168.52 "/>
<polygon fill="black" stroke="black" points="2118.99,-163.52 2119.01,-173.52 2117.01,-173.52 2116.99,-163.52 2118.99,-163.52"/>
<polyline fill="none" stroke="black" points="2120,-168.52 2115,-168.52 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="edge30" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PositionControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3:w</title>
<path fill="none" stroke="black" d="M1522.85,-168.5C1783.66,-168.5 1856.29,-168.5 2114.74,-168.5"/>
<polyline fill="none" stroke="black" points="1512.5,-168.5 1517.5,-168.5 "/>
<polyline fill="none" stroke="black" points="1517.5,-168.5 1522.5,-168.5 "/>
<polyline fill="none" stroke="black" points="2130,-168.5 2125,-168.5 "/>
<polygon fill="black" stroke="black" points="2124,-163.5 2124,-173.5 2122,-173.5 2122,-163.5 2124,-163.5"/>
<polyline fill="none" stroke="black" points="2125,-168.5 2120,-168.5 "/>
<polygon fill="black" stroke="black" points="2119,-163.5 2119,-173.5 2117,-173.5 2117,-163.5 2119,-163.5"/>
<polyline fill="none" stroke="black" points="2120,-168.5 2115,-168.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction -->
<g id="node32" class="node">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction</title>
<g id="a_node32"><a xlink:title="aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3635,-948.5 3635,-969.5 3817,-969.5 3817,-948.5 3635,-948.5"/>
<text text-anchor="start" x="3660.5" y="-956.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PatchRewardFunction</text>
<polygon fill="none" stroke="black" points="3635,-927.5 3635,-948.5 3720,-948.5 3720,-927.5 3635,-927.5"/>
<text text-anchor="start" x="3656.5" y="-934.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">amount</text>
<polygon fill="none" stroke="black" points="3720,-927.5 3720,-948.5 3817,-948.5 3817,-927.5 3720,-927.5"/>
<text text-anchor="start" x="3723" y="-934.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="3635,-906.5 3635,-927.5 3720,-927.5 3720,-906.5 3635,-906.5"/>
<text text-anchor="start" x="3647.5" y="-913.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">probability</text>
<polygon fill="none" stroke="black" points="3720,-906.5 3720,-927.5 3817,-927.5 3817,-906.5 3720,-906.5"/>
<text text-anchor="start" x="3723" y="-913.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="3635,-885.5 3635,-906.5 3720,-906.5 3720,-885.5 3635,-885.5"/>
<text text-anchor="start" x="3653" y="-892.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">available</text>
<polygon fill="none" stroke="black" points="3720,-885.5 3720,-906.5 3817,-906.5 3817,-885.5 3720,-885.5"/>
<text text-anchor="start" x="3723" y="-892.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="3635,-864.5 3635,-885.5 3720,-885.5 3720,-864.5 3635,-864.5"/>
<text text-anchor="start" x="3638" y="-871.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">depletion_rule</text>
<polygon fill="none" stroke="black" points="3720,-864.5 3720,-885.5 3817,-885.5 3817,-864.5 3720,-864.5"/>
<text text-anchor="start" x="3729" y="-871.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">DepletionRule</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="node33" class="node">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction</title>
<g id="a_node33"><a xlink:title="aind_behavior_vr_foraging.task_logic.RewardFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="3994,-905.5 3994,-926.5 4476,-926.5 4476,-905.5 3994,-905.5"/>
<text text-anchor="start" x="4186" y="-913.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="3994,-884.5 3994,-905.5 4022,-905.5 4022,-884.5 3994,-884.5"/>
<text text-anchor="start" x="3997" y="-891.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="4022,-884.5 4022,-905.5 4476,-905.5 4476,-884.5 4022,-884.5"/>
<text text-anchor="start" x="4025" y="-891.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[ConstantFunction, LinearFunction, PowerFunction, LookupTableFunction]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge23" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3828.27,-938.37C3893.66,-936.69 3915.63,-919.23 3978.9,-916.78"/>
<polyline fill="none" stroke="black" points="3818,-938.5 3823,-938.44 "/>
<polyline fill="none" stroke="black" points="3823,-938.44 3828,-938.37 "/>
<polyline fill="none" stroke="black" points="3994,-916.5 3989,-916.59 "/>
<polygon fill="black" stroke="black" points="3987.91,-911.61 3988.1,-921.61 3986.1,-921.65 3985.91,-911.65 3987.91,-911.61"/>
<polyline fill="none" stroke="black" points="3989,-916.59 3984,-916.69 "/>
<polygon fill="black" stroke="black" points="3982.91,-911.71 3983.1,-921.71 3981.1,-921.74 3980.91,-911.75 3982.91,-911.71"/>
<polyline fill="none" stroke="black" points="3984,-916.69 3979,-916.78 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge24" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3828.26,-895.62C3893.61,-897.22 3915.67,-913.89 3978.91,-916.23"/>
<polyline fill="none" stroke="black" points="3818,-895.5 3823,-895.56 "/>
<polyline fill="none" stroke="black" points="3823,-895.56 3828,-895.62 "/>
<polyline fill="none" stroke="black" points="3994,-916.5 3989,-916.41 "/>
<polygon fill="black" stroke="black" points="3988.09,-911.39 3987.91,-921.39 3985.91,-921.36 3986.09,-911.36 3988.09,-911.39"/>
<polyline fill="none" stroke="black" points="3989,-916.41 3984,-916.32 "/>
<polygon fill="black" stroke="black" points="3983.09,-911.3 3982.91,-921.3 3980.91,-921.27 3981.09,-911.27 3983.09,-911.3"/>
<polyline fill="none" stroke="black" points="3984,-916.32 3979,-916.23 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge25" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3828.2,-916.5C3893.18,-916.5 3916.07,-916.5 3979,-916.5"/>
<polyline fill="none" stroke="black" points="3818,-916.5 3823,-916.5 "/>
<polyline fill="none" stroke="black" points="3823,-916.5 3828,-916.5 "/>
<polyline fill="none" stroke="black" points="3994,-916.5 3989,-916.5 "/>
<polygon fill="black" stroke="black" points="3988,-911.5 3988,-921.5 3986,-921.5 3986,-911.5 3988,-911.5"/>
<polyline fill="none" stroke="black" points="3989,-916.5 3984,-916.5 "/>
<polygon fill="black" stroke="black" points="3983,-911.5 3983,-921.5 3981,-921.5 3981,-911.5 3983,-911.5"/>
<polyline fill="none" stroke="black" points="3984,-916.5 3979,-916.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.ConstantFunction -->
<g id="edge31" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.ConstantFunction:w</title>
<path fill="none" stroke="black" d="M4486,-895.23C4561.84,-906.86 4509.88,-1054.86 4579.88,-1072.74"/>
<polyline fill="none" stroke="black" points="4476,-894.5 4480.99,-894.86 "/>
<polyline fill="none" stroke="black" points="4480.99,-894.86 4485.97,-895.22 "/>
<polyline fill="none" stroke="black" points="4595,-1074.5 4590.03,-1073.92 "/>
<polygon fill="black" stroke="black" points="4589.62,-1068.84 4588.46,-1078.77 4586.47,-1078.54 4587.63,-1068.61 4589.62,-1068.84"/>
<polyline fill="none" stroke="black" points="4590.03,-1073.92 4585.07,-1073.34 "/>
<polygon fill="black" stroke="black" points="4584.65,-1068.26 4583.49,-1078.19 4581.51,-1077.96 4582.67,-1068.03 4584.65,-1068.26"/>
<polyline fill="none" stroke="black" points="4585.07,-1073.34 4580.1,-1072.76 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.LinearFunction -->
<g id="edge32" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.LinearFunction:w</title>
<path fill="none" stroke="black" d="M4486.28,-895.2C4537.11,-902.42 4539.13,-963.27 4586.85,-973.92"/>
<polyline fill="none" stroke="black" points="4476,-894.5 4480.99,-894.84 "/>
<polyline fill="none" stroke="black" points="4480.99,-894.84 4485.98,-895.18 "/>
<polyline fill="none" stroke="black" points="4602,-975.5 4597.03,-974.98 "/>
<polygon fill="black" stroke="black" points="4596.55,-969.9 4595.51,-979.85 4593.52,-979.64 4594.56,-969.69 4596.55,-969.9"/>
<polyline fill="none" stroke="black" points="4597.03,-974.98 4592.05,-974.46 "/>
<polygon fill="black" stroke="black" points="4591.58,-969.38 4590.54,-979.33 4588.55,-979.12 4589.59,-969.17 4591.58,-969.38"/>
<polyline fill="none" stroke="black" points="4592.05,-974.46 4587.08,-973.94 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.LookupTableFunction -->
<g id="edge33" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.LookupTableFunction:w</title>
<path fill="none" stroke="black" d="M4486.14,-893.65C4529.96,-885.85 4528.51,-827.12 4568.93,-815.5"/>
<polyline fill="none" stroke="black" points="4476,-894.5 4480.98,-894.08 "/>
<polyline fill="none" stroke="black" points="4480.98,-894.08 4485.96,-893.66 "/>
<polyline fill="none" stroke="black" points="4584,-813.5 4579.04,-814.16 "/>
<polygon fill="black" stroke="black" points="4577.4,-809.33 4578.71,-819.24 4576.73,-819.51 4575.41,-809.59 4577.4,-809.33"/>
<polyline fill="none" stroke="black" points="4579.04,-814.16 4574.09,-814.81 "/>
<polygon fill="black" stroke="black" points="4572.44,-809.99 4573.75,-819.9 4571.77,-820.16 4570.46,-810.25 4572.44,-809.99"/>
<polyline fill="none" stroke="black" points="4574.09,-814.81 4569.13,-815.47 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PowerFunction -->
<g id="node37" class="node">
<title>aind_behavior_vr_foraging.task_logic.PowerFunction</title>
<g id="a_node37"><a xlink:title="aind_behavior_vr_foraging.task_logic.PowerFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4603,-682.5 4603,-703.5 4824,-703.5 4824,-682.5 4603,-682.5"/>
<text text-anchor="start" x="4669" y="-690.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PowerFunction</text>
<polygon fill="none" stroke="black" points="4603,-661.5 4603,-682.5 4685,-682.5 4685,-661.5 4603,-661.5"/>
<text text-anchor="start" x="4606" y="-668.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4685,-661.5 4685,-682.5 4824,-682.5 4824,-661.5 4685,-661.5"/>
<text text-anchor="start" x="4688" y="-668.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;PowerFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4603,-640.5 4603,-661.5 4685,-661.5 4685,-640.5 4603,-640.5"/>
<text text-anchor="start" x="4616.5" y="-647.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">minimum</text>
<polygon fill="none" stroke="black" points="4685,-640.5 4685,-661.5 4824,-661.5 4824,-640.5 4685,-640.5"/>
<text text-anchor="start" x="4742" y="-647.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-619.5 4603,-640.5 4685,-640.5 4685,-619.5 4603,-619.5"/>
<text text-anchor="start" x="4615" y="-626.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="4685,-619.5 4685,-640.5 4824,-640.5 4824,-619.5 4685,-619.5"/>
<text text-anchor="start" x="4742" y="-626.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-598.5 4603,-619.5 4685,-619.5 4685,-598.5 4603,-598.5"/>
<text text-anchor="start" x="4640.5" y="-605.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">a</text>
<polygon fill="none" stroke="black" points="4685,-598.5 4685,-619.5 4824,-619.5 4824,-598.5 4685,-598.5"/>
<text text-anchor="start" x="4742" y="-605.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-577.5 4603,-598.5 4685,-598.5 4685,-577.5 4603,-577.5"/>
<text text-anchor="start" x="4640.5" y="-584.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">b</text>
<polygon fill="none" stroke="black" points="4685,-577.5 4685,-598.5 4824,-598.5 4824,-577.5 4685,-577.5"/>
<text text-anchor="start" x="4742" y="-584.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-556.5 4603,-577.5 4685,-577.5 4685,-556.5 4603,-556.5"/>
<text text-anchor="start" x="4640.5" y="-563.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">c</text>
<polygon fill="none" stroke="black" points="4685,-556.5 4685,-577.5 4824,-577.5 4824,-556.5 4685,-556.5"/>
<text text-anchor="start" x="4742" y="-563.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4603,-535.5 4603,-556.5 4685,-556.5 4685,-535.5 4603,-535.5"/>
<text text-anchor="start" x="4640.5" y="-542.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">d</text>
<polygon fill="none" stroke="black" points="4685,-535.5 4685,-556.5 4824,-556.5 4824,-535.5 4685,-535.5"/>
<text text-anchor="start" x="4742" y="-542.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.PowerFunction -->
<g id="edge34" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PowerFunction:w</title>
<path fill="none" stroke="black" d="M4486.16,-893.81C4570.95,-881.7 4507.95,-713.48 4586.83,-695.12"/>
<polyline fill="none" stroke="black" points="4476,-894.5 4480.99,-894.16 "/>
<polyline fill="none" stroke="black" points="4480.99,-894.16 4485.98,-893.82 "/>
<polyline fill="none" stroke="black" points="4602,-693.5 4597.03,-694.03 "/>
<polygon fill="black" stroke="black" points="4595.5,-689.17 4596.57,-699.11 4594.58,-699.32 4593.51,-689.38 4595.5,-689.17"/>
<polyline fill="none" stroke="black" points="4597.03,-694.03 4592.06,-694.56 "/>
<polygon fill="black" stroke="black" points="4590.53,-689.7 4591.59,-699.64 4589.61,-699.85 4588.54,-689.91 4590.53,-689.7"/>
<polyline fill="none" stroke="black" points="4592.06,-694.56 4587.09,-695.1 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification&#45;&gt;aind_behavior_vr_foraging.task_logic.OperantLogic -->
<g id="edge35" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OperantLogic:w</title>
<path fill="none" stroke="black" d="M3425.04,-1032.72C3513.75,-1036.67 3535.22,-1092.67 3619.88,-1099.76"/>
<polyline fill="none" stroke="black" points="3415,-1032.5 3420,-1032.61 "/>
<polyline fill="none" stroke="black" points="3420,-1032.61 3425,-1032.72 "/>
<polyline fill="none" stroke="black" points="3638,-1100.5 3633,-1100.3 "/>
<polygon fill="black" stroke="black" points="3632.21,-1095.26 3631.8,-1105.25 3629.8,-1105.17 3630.21,-1095.18 3632.21,-1095.26"/>
<polyline fill="none" stroke="black" points="3633,-1100.3 3628.01,-1100.09 "/>
<ellipse fill="none" stroke="black" cx="3624.01" cy="-1099.93" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchRewardFunction -->
<g id="edge36" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchRewardFunction:w</title>
<path fill="none" stroke="black" d="M3425.09,-989.39C3509.92,-987.54 3536.3,-962.53 3618.8,-959.75"/>
<polyline fill="none" stroke="black" points="3415,-989.5 3420,-989.45 "/>
<polyline fill="none" stroke="black" points="3420,-989.45 3425,-989.39 "/>
<polyline fill="none" stroke="black" points="3634,-959.5 3629,-959.58 "/>
<polygon fill="black" stroke="black" points="3627.92,-954.6 3628.08,-964.6 3626.08,-964.63 3625.92,-954.63 3627.92,-954.6"/>
<polyline fill="none" stroke="black" points="3629,-959.58 3624,-959.66 "/>
<polygon fill="black" stroke="black" points="3622.92,-954.68 3623.08,-964.68 3621.08,-964.71 3620.92,-954.71 3622.92,-954.68"/>
<polyline fill="none" stroke="black" points="3624,-959.66 3619,-959.75 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="node41" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator</title>
<g id="a_node41"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3566,-435.5 3566,-456.5 3886,-456.5 3886,-435.5 3566,-435.5"/>
<text text-anchor="start" x="3663.5" y="-443.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="3566,-414.5 3566,-435.5 3698,-435.5 3698,-414.5 3566,-414.5"/>
<text text-anchor="start" x="3576.5" y="-421.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="3698,-414.5 3698,-435.5 3886,-435.5 3886,-414.5 3698,-414.5"/>
<text text-anchor="start" x="3736.5" y="-421.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
<polygon fill="none" stroke="black" points="3566,-393.5 3566,-414.5 3698,-414.5 3698,-393.5 3566,-393.5"/>
<text text-anchor="start" x="3618.5" y="-400.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="3698,-393.5 3698,-414.5 3886,-414.5 3886,-393.5 3698,-393.5"/>
<text text-anchor="start" x="3744.5" y="-400.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteLabels</text>
<polygon fill="none" stroke="black" points="3566,-372.5 3566,-393.5 3698,-393.5 3698,-372.5 3566,-372.5"/>
<text text-anchor="start" x="3580.5" y="-379.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length_distribution</text>
<polygon fill="none" stroke="black" points="3698,-372.5 3698,-393.5 3886,-393.5 3886,-372.5 3698,-372.5"/>
<text text-anchor="start" x="3759" y="-379.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="3566,-351.5 3566,-372.5 3698,-372.5 3698,-351.5 3566,-351.5"/>
<text text-anchor="start" x="3569" y="-358.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">treadmill_specification</text>
<polygon fill="none" stroke="black" points="3698,-351.5 3698,-372.5 3886,-372.5 3886,-351.5 3698,-351.5"/>
<text text-anchor="start" x="3701" y="-358.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TreadmillSpecification]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge45" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M3431.26,-424.69C3482.95,-426.65 3501.18,-443.18 3550.74,-446.07"/>
<polyline fill="none" stroke="black" points="3421,-424.5 3426,-424.59 "/>
<polyline fill="none" stroke="black" points="3426,-424.59 3431,-424.69 "/>
<polyline fill="none" stroke="black" points="3566,-446.5 3561,-446.36 "/>
<polygon fill="black" stroke="black" points="3560.14,-441.33 3559.86,-451.33 3557.86,-451.27 3558.14,-441.28 3560.14,-441.33"/>
<polyline fill="none" stroke="black" points="3561,-446.36 3556,-446.22 "/>
<polygon fill="black" stroke="black" points="3555.15,-441.19 3554.86,-451.19 3552.86,-451.13 3553.15,-441.14 3555.15,-441.19"/>
<polyline fill="none" stroke="black" points="3556,-446.22 3551.01,-446.08 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge46" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M3431.16,-446.5C3482.41,-446.5 3501.67,-446.5 3550.88,-446.5"/>
<polyline fill="none" stroke="black" points="3421,-446.5 3426,-446.5 "/>
<polyline fill="none" stroke="black" points="3426,-446.5 3431,-446.5 "/>
<polyline fill="none" stroke="black" points="3566,-446.5 3561,-446.5 "/>
<polygon fill="black" stroke="black" points="3560,-441.5 3560,-451.5 3558,-451.5 3558,-441.5 3560,-441.5"/>
<polyline fill="none" stroke="black" points="3561,-446.5 3556,-446.5 "/>
<polygon fill="black" stroke="black" points="3555,-441.5 3555,-451.5 3553,-451.5 3553,-441.5 3555,-441.5"/>
<polyline fill="none" stroke="black" points="3556,-446.5 3551,-446.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge47" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M3431.18,-403.85C3483.45,-407.49 3499.18,-438.88 3547.75,-445.34"/>
<polyline fill="none" stroke="black" points="3421,-403.5 3426,-403.67 "/>
<polyline fill="none" stroke="black" points="3426,-403.67 3430.99,-403.84 "/>
<polyline fill="none" stroke="black" points="3566,-446.5 3561.01,-446.18 "/>
<polygon fill="black" stroke="black" points="3560.33,-441.13 3559.7,-451.11 3557.7,-450.98 3558.33,-441 3560.33,-441.13"/>
<polyline fill="none" stroke="black" points="3561.01,-446.18 3556.02,-445.87 "/>
<ellipse fill="none" stroke="black" cx="3552.03" cy="-445.61" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge48" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M3431.24,-382.98C3487.16,-388.37 3497.65,-437.6 3551.03,-445.45"/>
<polyline fill="none" stroke="black" points="3421,-382.5 3425.99,-382.73 "/>
<polyline fill="none" stroke="black" points="3425.99,-382.73 3430.99,-382.97 "/>
<polyline fill="none" stroke="black" points="3566,-446.5 3561.01,-446.15 "/>
<polygon fill="black" stroke="black" points="3560.37,-441.09 3559.66,-451.07 3557.67,-450.93 3558.37,-440.95 3560.37,-441.09"/>
<polyline fill="none" stroke="black" points="3561.01,-446.15 3556.02,-445.8 "/>
<polygon fill="black" stroke="black" points="3555.38,-440.74 3554.68,-450.72 3552.68,-450.58 3553.38,-440.6 3555.38,-440.74"/>
<polyline fill="none" stroke="black" points="3556.02,-445.8 3551.04,-445.45 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Texture -->
<g id="node39" class="node">
<title>aind_behavior_vr_foraging.task_logic.Texture</title>
<g id="a_node39"><a xlink:title="aind_behavior_vr_foraging.task_logic.Texture&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3693,-630.5 3693,-651.5 3760,-651.5 3760,-630.5 3693,-630.5"/>
<text text-anchor="start" x="3703.5" y="-638.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="3693,-609.5 3693,-630.5 3730,-630.5 3730,-609.5 3693,-609.5"/>
<text text-anchor="start" x="3696" y="-616.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="3730,-609.5 3730,-630.5 3760,-630.5 3760,-609.5 3730,-609.5"/>
<text text-anchor="start" x="3738" y="-616.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="3693,-588.5 3693,-609.5 3730,-609.5 3730,-588.5 3693,-588.5"/>
<text text-anchor="start" x="3700.5" y="-595.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">size</text>
<polygon fill="none" stroke="black" points="3730,-588.5 3730,-609.5 3760,-609.5 3760,-588.5 3730,-588.5"/>
<text text-anchor="start" x="3733" y="-595.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Size</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Texture&#45;&gt;aind_behavior_vr_foraging.task_logic.Size -->
<g id="edge40" class="edge">
<title>aind_behavior_vr_foraging.task_logic.Texture:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Size:w</title>
<path fill="none" stroke="black" d="M3771.19,-598.54C3953.48,-600.13 4003.93,-644.04 4183.81,-646.4"/>
<polyline fill="none" stroke="black" points="3761,-598.5 3766,-598.52 "/>
<polyline fill="none" stroke="black" points="3766,-598.52 3771,-598.54 "/>
<polyline fill="none" stroke="black" points="4199,-646.5 4194,-646.47 "/>
<polygon fill="black" stroke="black" points="4193.03,-641.46 4192.97,-651.46 4190.97,-651.45 4191.03,-641.45 4193.03,-641.46"/>
<polyline fill="none" stroke="black" points="4194,-646.47 4189,-646.44 "/>
<polygon fill="black" stroke="black" points="4188.03,-641.43 4187.97,-651.43 4185.97,-651.42 4186.03,-641.42 4188.03,-641.43"/>
<polyline fill="none" stroke="black" points="4189,-646.44 4184,-646.4 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge49" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M3896.19,-425.25C4018.43,-419.28 4031.57,-305.9 4150.91,-297.05"/>
<polyline fill="none" stroke="black" points="3886,-425.5 3891,-425.38 "/>
<polyline fill="none" stroke="black" points="3891,-425.38 3896,-425.26 "/>
<polyline fill="none" stroke="black" points="4166,-296.5 4161,-296.68 "/>
<polygon fill="black" stroke="black" points="4159.82,-291.72 4160.18,-301.71 4158.19,-301.79 4157.82,-291.79 4159.82,-291.72"/>
<polyline fill="none" stroke="black" points="4161,-296.68 4156.01,-296.86 "/>
<polygon fill="black" stroke="black" points="4154.83,-291.9 4155.19,-301.89 4153.19,-301.97 4152.83,-291.97 4154.83,-291.9"/>
<polyline fill="none" stroke="black" points="4156.01,-296.86 4151.01,-297.04 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#45;&gt;aind_behavior_vr_foraging.task_logic.TreadmillSpecification -->
<g id="edge50" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:e&#45;&gt;aind_behavior_vr_foraging.task_logic.TreadmillSpecification:w</title>
<path fill="none" stroke="black" d="M3896.26,-361.77C4008.73,-367.86 4021.05,-473.87 4128.85,-484.62"/>
<polyline fill="none" stroke="black" points="3886,-361.5 3891,-361.63 "/>
<polyline fill="none" stroke="black" points="3891,-361.63 3896,-361.77 "/>
<polyline fill="none" stroke="black" points="4147,-485.5 4142.01,-485.26 "/>
<polygon fill="black" stroke="black" points="4141.25,-480.22 4140.77,-490.2 4138.77,-490.11 4139.25,-480.12 4141.25,-480.22"/>
<polyline fill="none" stroke="black" points="4142.01,-485.26 4137.01,-485.02 "/>
<ellipse fill="none" stroke="black" cx="4133.02" cy="-484.82" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge53" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M3354.25,-640.5C3495.47,-640.54 3537.93,-641.44 3676.88,-641.5"/>
<polyline fill="none" stroke="black" points="3344,-640.5 3349,-640.5 "/>
<polyline fill="none" stroke="black" points="3349,-640.5 3354,-640.5 "/>
<polyline fill="none" stroke="black" points="3692,-641.5 3687,-641.5 "/>
<polygon fill="black" stroke="black" points="3686,-636.5 3686,-646.5 3684,-646.5 3684,-636.5 3686,-636.5"/>
<polyline fill="none" stroke="black" points="3687,-641.5 3682,-641.5 "/>
<polygon fill="black" stroke="black" points="3681,-636.5 3681,-646.5 3679,-646.5 3679,-636.5 3681,-636.5"/>
<polyline fill="none" stroke="black" points="3682,-641.5 3677,-641.5 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge54" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M3354.27,-662.47C3495.71,-661.6 3537.69,-642.85 3676.85,-641.57"/>
<polyline fill="none" stroke="black" points="3344,-662.5 3349,-662.48 "/>
<polyline fill="none" stroke="black" points="3349,-662.48 3354,-662.47 "/>
<polyline fill="none" stroke="black" points="3692,-641.5 3687,-641.52 "/>
<polygon fill="black" stroke="black" points="3685.98,-636.53 3686.02,-646.53 3684.02,-646.54 3683.98,-636.54 3685.98,-636.53"/>
<polyline fill="none" stroke="black" points="3687,-641.52 3682,-641.55 "/>
<polygon fill="black" stroke="black" points="3680.98,-636.55 3681.02,-646.55 3679.02,-646.56 3678.98,-636.56 3680.98,-636.55"/>
<polyline fill="none" stroke="black" points="3682,-641.55 3677,-641.57 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge55" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M3354.27,-619.53C3495.74,-620.44 3537.66,-640.09 3676.85,-641.43"/>
<polyline fill="none" stroke="black" points="3344,-619.5 3349,-619.52 "/>
<polyline fill="none" stroke="black" points="3349,-619.52 3354,-619.53 "/>
<polyline fill="none" stroke="black" points="3692,-641.5 3687,-641.48 "/>
<polygon fill="black" stroke="black" points="3686.02,-636.47 3685.98,-646.47 3683.98,-646.46 3684.02,-636.46 3686.02,-636.47"/>
<polyline fill="none" stroke="black" points="3687,-641.48 3682,-641.45 "/>
<polygon fill="black" stroke="black" points="3681.02,-636.45 3680.98,-646.45 3678.98,-646.44 3679.02,-636.44 3681.02,-636.45"/>
<polyline fill="none" stroke="black" points="3682,-641.45 3677,-641.43 "/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge56" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M3354.32,-598.56C3496.5,-600.35 3536.92,-638.74 3676.77,-641.36"/>
<polyline fill="none" stroke="black" points="3344,-598.5 3349,-598.53 "/>
<polyline fill="none" stroke="black" points="3349,-598.53 3354,-598.56 "/>
<polyline fill="none" stroke="black" points="3692,-641.5 3687,-641.45 "/>
<polygon fill="black" stroke="black" points="3686.05,-636.44 3685.95,-646.44 3683.95,-646.43 3684.05,-636.43 3686.05,-636.44"/>
<polyline fill="none" stroke="black" points="3687,-641.45 3682,-641.41 "/>
<polygon fill="black" stroke="black" points="3681.05,-636.4 3680.95,-646.4 3678.95,-646.38 3679.05,-636.38 3681.05,-636.4"/>
<polyline fill="none" stroke="black" points="3682,-641.41 3677,-641.36 "/>
</g>
</g>
</svg>
